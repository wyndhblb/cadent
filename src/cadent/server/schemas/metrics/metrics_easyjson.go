// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package metrics

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson2220f231DecodeCadentServerSchemasMetrics(in *jlexer.Lexer, out *RawRenderItems) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if !in.IsDelim(']') {
			*out = make(RawRenderItems, 0, 8)
		} else {
			*out = RawRenderItems{}
		}
		for !in.IsDelim(']') {
			var v1 *RawRenderItem
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(RawRenderItem)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*v1).UnmarshalJSON(data))
				}
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2220f231EncodeCadentServerSchemasMetrics(out *jwriter.Writer, in RawRenderItems) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v3).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v RawRenderItems) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2220f231EncodeCadentServerSchemasMetrics(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawRenderItems) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2220f231EncodeCadentServerSchemasMetrics(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawRenderItems) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2220f231DecodeCadentServerSchemasMetrics(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawRenderItems) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2220f231DecodeCadentServerSchemasMetrics(l, v)
}
func easyjson2220f231DecodeCadentServerSchemasMetrics1(in *jlexer.Lexer, out *GraphiteApiItems) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if !in.IsDelim(']') {
			*out = make(GraphiteApiItems, 0, 8)
		} else {
			*out = GraphiteApiItems{}
		}
		for !in.IsDelim(']') {
			var v4 *GraphiteApiItem
			if in.IsNull() {
				in.Skip()
				v4 = nil
			} else {
				if v4 == nil {
					v4 = new(GraphiteApiItem)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*v4).UnmarshalJSON(data))
				}
			}
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2220f231EncodeCadentServerSchemasMetrics1(out *jwriter.Writer, in GraphiteApiItems) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			if v6 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v6).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v GraphiteApiItems) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2220f231EncodeCadentServerSchemasMetrics1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GraphiteApiItems) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2220f231EncodeCadentServerSchemasMetrics1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GraphiteApiItems) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2220f231DecodeCadentServerSchemasMetrics1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GraphiteApiItems) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2220f231DecodeCadentServerSchemasMetrics1(l, v)
}
func easyjson2220f231DecodeCadentServerSchemasMetrics2(in *jlexer.Lexer, out *RenderItems) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if !in.IsDelim(']') {
			*out = make(RenderItems, 0, 8)
		} else {
			*out = RenderItems{}
		}
		for !in.IsDelim(']') {
			var v7 *RenderItem
			if in.IsNull() {
				in.Skip()
				v7 = nil
			} else {
				if v7 == nil {
					v7 = new(RenderItem)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*v7).UnmarshalJSON(data))
				}
			}
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2220f231EncodeCadentServerSchemasMetrics2(out *jwriter.Writer, in RenderItems) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			if v9 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v9).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v RenderItems) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2220f231EncodeCadentServerSchemasMetrics2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RenderItems) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2220f231EncodeCadentServerSchemasMetrics2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RenderItems) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2220f231DecodeCadentServerSchemasMetrics2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RenderItems) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2220f231DecodeCadentServerSchemasMetrics2(l, v)
}
func easyjson2220f231DecodeCadentServerSchemasMetrics3(in *jlexer.Lexer, out *DBSeriesList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if !in.IsDelim(']') {
			*out = make(DBSeriesList, 0, 8)
		} else {
			*out = DBSeriesList{}
		}
		for !in.IsDelim(']') {
			var v10 *DBSeries
			if in.IsNull() {
				in.Skip()
				v10 = nil
			} else {
				if v10 == nil {
					v10 = new(DBSeries)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*v10).UnmarshalJSON(data))
				}
			}
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2220f231EncodeCadentServerSchemasMetrics3(out *jwriter.Writer, in DBSeriesList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			if v12 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v12).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v DBSeriesList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2220f231EncodeCadentServerSchemasMetrics3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DBSeriesList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2220f231EncodeCadentServerSchemasMetrics3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DBSeriesList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2220f231DecodeCadentServerSchemasMetrics3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DBSeriesList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2220f231DecodeCadentServerSchemasMetrics3(l, v)
}
func easyjson2220f231DecodeCadentServerSchemasMetrics4(in *jlexer.Lexer, out *DBSeries) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			out.Id = in.Interface()
		case "Uid":
			out.Uid = string(in.String())
		case "Start":
			out.Start = int64(in.Int64())
		case "End":
			out.End = int64(in.Int64())
		case "Ptype":
			out.Ptype = uint8(in.Uint8())
		case "Pbytes":
			if in.IsNull() {
				in.Skip()
				out.Pbytes = nil
			} else {
				out.Pbytes = in.Bytes()
			}
		case "Resolution":
			out.Resolution = uint32(in.Uint32())
		case "TTL":
			out.TTL = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2220f231EncodeCadentServerSchemasMetrics4(out *jwriter.Writer, in DBSeries) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Id\":")
	if m, ok := in.Id.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.Id))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Uid\":")
	out.String(string(in.Uid))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Start\":")
	out.Int64(int64(in.Start))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"End\":")
	out.Int64(int64(in.End))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Ptype\":")
	out.Uint8(uint8(in.Ptype))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Pbytes\":")
	out.Base64Bytes(in.Pbytes)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Resolution\":")
	out.Uint32(uint32(in.Resolution))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"TTL\":")
	out.Uint32(uint32(in.TTL))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DBSeries) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2220f231EncodeCadentServerSchemasMetrics4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DBSeries) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2220f231EncodeCadentServerSchemasMetrics4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DBSeries) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2220f231DecodeCadentServerSchemasMetrics4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DBSeries) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2220f231DecodeCadentServerSchemasMetrics4(l, v)
}
