// Code generated by protoc-gen-gogo.
// source: metrics.proto
// DO NOT EDIT!

/*
	Package metrics is a generated protocol buffer package.

	It is generated from these files:
		metrics.proto

	It has these top-level messages:
		DataPoint
		DataPoints
		RawDataPoint
		RenderItem
		RenderItemList
		RawRenderItem
		RawRenderItemList
		WhisperDataItem
		WhisperDataItemList
		WhisperRenderItem
		GraphiteApiItem
		GraphiteApiItemList
*/
package metrics

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import repr "cadent/server/schemas/repr"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DataPoint struct {
	Time  uint32  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty" msg:"time"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty" msg:"value"`
}

func (m *DataPoint) Reset()                    { *m = DataPoint{} }
func (m *DataPoint) String() string            { return proto.CompactTextString(m) }
func (*DataPoint) ProtoMessage()               {}
func (*DataPoint) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{0} }

type DataPoints struct {
	Points []*DataPoint `protobuf:"bytes,1,rep,name=points" json:"points,omitempty" msg:"points"`
}

func (m *DataPoints) Reset()                    { *m = DataPoints{} }
func (m *DataPoints) String() string            { return proto.CompactTextString(m) }
func (*DataPoints) ProtoMessage()               {}
func (*DataPoints) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{1} }

type RawDataPoint struct {
	Time  uint32  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty" msg:"time"`
	Sum   float64 `protobuf:"fixed64,3,opt,name=sum,proto3" json:"sum,omitempty" msg:"sum"`
	Min   float64 `protobuf:"fixed64,4,opt,name=min,proto3" json:"min,omitempty" msg:"min"`
	Max   float64 `protobuf:"fixed64,5,opt,name=max,proto3" json:"max,omitempty" msg:"max"`
	Last  float64 `protobuf:"fixed64,6,opt,name=last,proto3" json:"last,omitempty" msg:"last"`
	Count int64   `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty" msg:"count"`
}

func (m *RawDataPoint) Reset()                    { *m = RawDataPoint{} }
func (m *RawDataPoint) String() string            { return proto.CompactTextString(m) }
func (*RawDataPoint) ProtoMessage()               {}
func (*RawDataPoint) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{2} }

// the basic metric json blob for find
// easyjson:json
type RenderItem struct {
	Target     string       `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty" msg:"target"`
	DataPoints []*DataPoint `protobuf:"bytes,2,rep,name=dataPoints,json=datapoints" json:"dataPoints,omitempty" msg:"dataPoints"`
}

func (m *RenderItem) Reset()                    { *m = RenderItem{} }
func (m *RenderItem) String() string            { return proto.CompactTextString(m) }
func (*RenderItem) ProtoMessage()               {}
func (*RenderItem) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{3} }

// RenderItemList a list of RenderItemList for protobuf transports, msgpack, json handle
// []*RenderItem just fine
// easyjson:json
type RenderItemList struct {
	Items []*RenderItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty" msg:"items"`
}

func (m *RenderItemList) Reset()                    { *m = RenderItemList{} }
func (m *RenderItemList) String() string            { return proto.CompactTextString(m) }
func (*RenderItemList) ProtoMessage()               {}
func (*RenderItemList) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{4} }

// easyjson:json
type RawRenderItem struct {
	Metric     string          `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"  msg:"metric"`
	Id         string          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"  msg:"id"`
	RealStart  uint32          `protobuf:"varint,3,opt,name=realStart,json=real_start,proto3" json:"real_start,omitempty"   msg:"real_start"`
	RealEnd    uint32          `protobuf:"varint,4,opt,name=realEnd,json=real_end,proto3" json:"real_end,omitempty"   msg:"real_end"`
	Start      uint32          `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"   msg:"start"`
	End        uint32          `protobuf:"varint,6,opt,name=end,proto3" json:"end,omitempty"   msg:"end"`
	Step       uint32          `protobuf:"varint,7,opt,name=step,proto3" json:"step,omitempty"   msg:"step"`
	AggFunc    uint32          `protobuf:"varint,8,opt,name=aggFunc,proto3" json:"agg_func,omitempty"   msg:"agg_func"`
	Tags       []*repr.Tag     `protobuf:"bytes,9,rep,name=tags" json:"tags,omitempty"   msg:"tags"`
	MetaTags   []*repr.Tag     `protobuf:"bytes,10,rep,name=meta_tags" json:"meta_tags,omitempty"   msg:"meta_tags"`
	Data       []*RawDataPoint `protobuf:"bytes,11,rep,name=data" json:"data,omitempty"   msg:"data"`
	InCache    bool            `protobuf:"varint,12,opt,name=inCache,json=in_cache,proto3" json:"in_cache,omitempty"   msg:"in_cache"`
	UsingCache bool            `protobuf:"varint,13,opt,name=usingCache,json=using_cache,proto3" json:"using_cache,omitempty"   msg:"using_cache"`
}

func (m *RawRenderItem) Reset()                    { *m = RawRenderItem{} }
func (m *RawRenderItem) String() string            { return proto.CompactTextString(m) }
func (*RawRenderItem) ProtoMessage()               {}
func (*RawRenderItem) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{5} }

// RawRenderItemList a list of RawRenderItems for protobuf transports, msgpack, json handel
// []*RawRenderItem just fine
// easyjson:json
type RawRenderItemList struct {
	Items []*RawRenderItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty" msg:"items"`
}

func (m *RawRenderItemList) Reset()                    { *m = RawRenderItemList{} }
func (m *RawRenderItemList) String() string            { return proto.CompactTextString(m) }
func (*RawRenderItemList) ProtoMessage()               {}
func (*RawRenderItemList) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{6} }

// easyjson:json
type WhisperDataItem struct {
	Target     string       `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"  msg:"target"`
	InCache    bool         `protobuf:"varint,2,opt,name=in_cache,proto3" json:"in_cache,omitempty" msg:"in_cache"`
	UsingCache bool         `protobuf:"varint,3,opt,name=using_cache,proto3" json:"using_cache,omitempty" msg:"using_cache"`
	Uid        string       `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty" msg:"uid"`
	Data       []*DataPoint `protobuf:"bytes,5,rep,name=data" json:"data,omitempty" msg:"data"`
}

func (m *WhisperDataItem) Reset()                    { *m = WhisperDataItem{} }
func (m *WhisperDataItem) String() string            { return proto.CompactTextString(m) }
func (*WhisperDataItem) ProtoMessage()               {}
func (*WhisperDataItem) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{7} }

// WhisperDataItem a list of WhisperDataItem for protobuf transports, msgpack, json handel
// []*WhisperDataItem just fine
// easyjson:json
type WhisperDataItemList struct {
	Items []*WhisperDataItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty" msg:"items"`
}

func (m *WhisperDataItemList) Reset()                    { *m = WhisperDataItemList{} }
func (m *WhisperDataItemList) String() string            { return proto.CompactTextString(m) }
func (*WhisperDataItemList) ProtoMessage()               {}
func (*WhisperDataItemList) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{8} }

type WhisperRenderItem struct {
	RealStart uint32                      `protobuf:"varint,1,opt,name=real_start,proto3" json:"real_start,omitempty" msg:"real_start"`
	RealEnd   uint32                      `protobuf:"varint,2,opt,name=real_end,proto3" json:"real_end,omitempty" msg:"real_end"`
	Start     uint32                      `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty" msg:"start"`
	End       uint32                      `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty" msg:"end"`
	From      uint32                      `protobuf:"varint,5,opt,name=from,proto3" json:"from,omitempty" msg:"from"`
	To        uint32                      `protobuf:"varint,6,opt,name=to,json=from,proto3" json:"to,omitempty" msg:"to"`
	Step      uint32                      `protobuf:"varint,7,opt,name=step,proto3" json:"step,omitempty" msg:"step"`
	Series    map[string]*WhisperDataItem `protobuf:"bytes,8,rep,name=series" json:"series,omitempty" msg:"series"  protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *WhisperRenderItem) Reset()                    { *m = WhisperRenderItem{} }
func (m *WhisperRenderItem) String() string            { return proto.CompactTextString(m) }
func (*WhisperRenderItem) ProtoMessage()               {}
func (*WhisperRenderItem) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{9} }

// easyjson:json
type GraphiteApiItem struct {
	Target     string       `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty" msg:"target"`
	InCache    bool         `protobuf:"varint,2,opt,name=in_cache,proto3" json:"in_cache,omitempty" msg:"in_cache"`
	UsingCache bool         `protobuf:"varint,3,opt,name=using_cache,proto3" json:"using_cache,omitempty" msg:"using_cache"`
	Datapoints []*DataPoint `protobuf:"bytes,4,rep,name=datapoints" json:"datapoints,omitempty" msg:"datapoints"`
}

func (m *GraphiteApiItem) Reset()                    { *m = GraphiteApiItem{} }
func (m *GraphiteApiItem) String() string            { return proto.CompactTextString(m) }
func (*GraphiteApiItem) ProtoMessage()               {}
func (*GraphiteApiItem) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{10} }

// GraphiteApiItemList a list of GraphiteApiItem for protobuf transports, msgpack, json handel
// []*GraphiteApiItem just fine
// easyjson:json
type GraphiteApiItemList struct {
	Items []*GraphiteApiItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty" msg:"items"`
}

func (m *GraphiteApiItemList) Reset()                    { *m = GraphiteApiItemList{} }
func (m *GraphiteApiItemList) String() string            { return proto.CompactTextString(m) }
func (*GraphiteApiItemList) ProtoMessage()               {}
func (*GraphiteApiItemList) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{11} }

func init() {
	proto.RegisterType((*DataPoint)(nil), "metrics.DataPoint")
	proto.RegisterType((*DataPoints)(nil), "metrics.DataPoints")
	proto.RegisterType((*RawDataPoint)(nil), "metrics.RawDataPoint")
	proto.RegisterType((*RenderItem)(nil), "metrics.RenderItem")
	proto.RegisterType((*RenderItemList)(nil), "metrics.RenderItemList")
	proto.RegisterType((*RawRenderItem)(nil), "metrics.RawRenderItem")
	proto.RegisterType((*RawRenderItemList)(nil), "metrics.RawRenderItemList")
	proto.RegisterType((*WhisperDataItem)(nil), "metrics.WhisperDataItem")
	proto.RegisterType((*WhisperDataItemList)(nil), "metrics.WhisperDataItemList")
	proto.RegisterType((*WhisperRenderItem)(nil), "metrics.WhisperRenderItem")
	proto.RegisterType((*GraphiteApiItem)(nil), "metrics.GraphiteApiItem")
	proto.RegisterType((*GraphiteApiItemList)(nil), "metrics.GraphiteApiItemList")
}
func (m *DataPoint) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DataPoint) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintMetrics(data, i, uint64(m.Time))
	}
	if m.Value != 0 {
		data[i] = 0x11
		i++
		i = encodeFixed64Metrics(data, i, uint64(math.Float64bits(float64(m.Value))))
	}
	return i, nil
}

func (m *DataPoints) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DataPoints) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Points) > 0 {
		for _, msg := range m.Points {
			data[i] = 0xa
			i++
			i = encodeVarintMetrics(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawDataPoint) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RawDataPoint) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintMetrics(data, i, uint64(m.Time))
	}
	if m.Sum != 0 {
		data[i] = 0x19
		i++
		i = encodeFixed64Metrics(data, i, uint64(math.Float64bits(float64(m.Sum))))
	}
	if m.Min != 0 {
		data[i] = 0x21
		i++
		i = encodeFixed64Metrics(data, i, uint64(math.Float64bits(float64(m.Min))))
	}
	if m.Max != 0 {
		data[i] = 0x29
		i++
		i = encodeFixed64Metrics(data, i, uint64(math.Float64bits(float64(m.Max))))
	}
	if m.Last != 0 {
		data[i] = 0x31
		i++
		i = encodeFixed64Metrics(data, i, uint64(math.Float64bits(float64(m.Last))))
	}
	if m.Count != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintMetrics(data, i, uint64(m.Count))
	}
	return i, nil
}

func (m *RenderItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RenderItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintMetrics(data, i, uint64(len(m.Target)))
		i += copy(data[i:], m.Target)
	}
	if len(m.DataPoints) > 0 {
		for _, msg := range m.DataPoints {
			data[i] = 0x12
			i++
			i = encodeVarintMetrics(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RenderItemList) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RenderItemList) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			data[i] = 0x12
			i++
			i = encodeVarintMetrics(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RawRenderItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RawRenderItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metric) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintMetrics(data, i, uint64(len(m.Metric)))
		i += copy(data[i:], m.Metric)
	}
	if len(m.Id) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintMetrics(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if m.RealStart != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintMetrics(data, i, uint64(m.RealStart))
	}
	if m.RealEnd != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintMetrics(data, i, uint64(m.RealEnd))
	}
	if m.Start != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintMetrics(data, i, uint64(m.Start))
	}
	if m.End != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintMetrics(data, i, uint64(m.End))
	}
	if m.Step != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintMetrics(data, i, uint64(m.Step))
	}
	if m.AggFunc != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintMetrics(data, i, uint64(m.AggFunc))
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			data[i] = 0x4a
			i++
			i = encodeVarintMetrics(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MetaTags) > 0 {
		for _, msg := range m.MetaTags {
			data[i] = 0x52
			i++
			i = encodeVarintMetrics(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			data[i] = 0x5a
			i++
			i = encodeVarintMetrics(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.InCache {
		data[i] = 0x60
		i++
		if m.InCache {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.UsingCache {
		data[i] = 0x68
		i++
		if m.UsingCache {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RawRenderItemList) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RawRenderItemList) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			data[i] = 0xa
			i++
			i = encodeVarintMetrics(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WhisperDataItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *WhisperDataItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintMetrics(data, i, uint64(len(m.Target)))
		i += copy(data[i:], m.Target)
	}
	if m.InCache {
		data[i] = 0x10
		i++
		if m.InCache {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.UsingCache {
		data[i] = 0x18
		i++
		if m.UsingCache {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Uid) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintMetrics(data, i, uint64(len(m.Uid)))
		i += copy(data[i:], m.Uid)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			data[i] = 0x2a
			i++
			i = encodeVarintMetrics(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WhisperDataItemList) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *WhisperDataItemList) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			data[i] = 0xa
			i++
			i = encodeVarintMetrics(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WhisperRenderItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *WhisperRenderItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RealStart != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintMetrics(data, i, uint64(m.RealStart))
	}
	if m.RealEnd != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintMetrics(data, i, uint64(m.RealEnd))
	}
	if m.Start != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintMetrics(data, i, uint64(m.Start))
	}
	if m.End != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintMetrics(data, i, uint64(m.End))
	}
	if m.From != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintMetrics(data, i, uint64(m.From))
	}
	if m.To != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintMetrics(data, i, uint64(m.To))
	}
	if m.Step != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintMetrics(data, i, uint64(m.Step))
	}
	if len(m.Series) > 0 {
		for k := range m.Series {
			data[i] = 0x42
			i++
			v := m.Series[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMetrics(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovMetrics(uint64(len(k))) + msgSize
			i = encodeVarintMetrics(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintMetrics(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			if v != nil {
				data[i] = 0x12
				i++
				i = encodeVarintMetrics(data, i, uint64(v.Size()))
				n1, err := v.MarshalTo(data[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *GraphiteApiItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GraphiteApiItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintMetrics(data, i, uint64(len(m.Target)))
		i += copy(data[i:], m.Target)
	}
	if m.InCache {
		data[i] = 0x10
		i++
		if m.InCache {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.UsingCache {
		data[i] = 0x18
		i++
		if m.UsingCache {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Datapoints) > 0 {
		for _, msg := range m.Datapoints {
			data[i] = 0x22
			i++
			i = encodeVarintMetrics(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GraphiteApiItemList) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GraphiteApiItemList) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			data[i] = 0xa
			i++
			i = encodeVarintMetrics(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Metrics(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Metrics(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMetrics(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedDataPoint(r randyMetrics, easy bool) *DataPoint {
	this := &DataPoint{}
	this.Time = uint32(r.Uint32())
	this.Value = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Value *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDataPoints(r randyMetrics, easy bool) *DataPoints {
	this := &DataPoints{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Points = make([]*DataPoint, v1)
		for i := 0; i < v1; i++ {
			this.Points[i] = NewPopulatedDataPoint(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRawDataPoint(r randyMetrics, easy bool) *RawDataPoint {
	this := &RawDataPoint{}
	this.Time = uint32(r.Uint32())
	this.Sum = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Sum *= -1
	}
	this.Min = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Min *= -1
	}
	this.Max = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Max *= -1
	}
	this.Last = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Last *= -1
	}
	this.Count = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Count *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRenderItem(r randyMetrics, easy bool) *RenderItem {
	this := &RenderItem{}
	this.Target = randStringMetrics(r)
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.DataPoints = make([]*DataPoint, v2)
		for i := 0; i < v2; i++ {
			this.DataPoints[i] = NewPopulatedDataPoint(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRenderItemList(r randyMetrics, easy bool) *RenderItemList {
	this := &RenderItemList{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Items = make([]*RenderItem, v3)
		for i := 0; i < v3; i++ {
			this.Items[i] = NewPopulatedRenderItem(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRawRenderItem(r randyMetrics, easy bool) *RawRenderItem {
	this := &RawRenderItem{}
	this.Metric = randStringMetrics(r)
	this.Id = randStringMetrics(r)
	this.RealStart = uint32(r.Uint32())
	this.RealEnd = uint32(r.Uint32())
	this.Start = uint32(r.Uint32())
	this.End = uint32(r.Uint32())
	this.Step = uint32(r.Uint32())
	this.AggFunc = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Tags = make([]*repr.Tag, v4)
		for i := 0; i < v4; i++ {
			this.Tags[i] = repr.NewPopulatedTag(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.MetaTags = make([]*repr.Tag, v5)
		for i := 0; i < v5; i++ {
			this.MetaTags[i] = repr.NewPopulatedTag(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Data = make([]*RawDataPoint, v6)
		for i := 0; i < v6; i++ {
			this.Data[i] = NewPopulatedRawDataPoint(r, easy)
		}
	}
	this.InCache = bool(bool(r.Intn(2) == 0))
	this.UsingCache = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRawRenderItemList(r randyMetrics, easy bool) *RawRenderItemList {
	this := &RawRenderItemList{}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.Items = make([]*RawRenderItem, v7)
		for i := 0; i < v7; i++ {
			this.Items[i] = NewPopulatedRawRenderItem(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedWhisperDataItem(r randyMetrics, easy bool) *WhisperDataItem {
	this := &WhisperDataItem{}
	this.Target = randStringMetrics(r)
	this.InCache = bool(bool(r.Intn(2) == 0))
	this.UsingCache = bool(bool(r.Intn(2) == 0))
	this.Uid = randStringMetrics(r)
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.Data = make([]*DataPoint, v8)
		for i := 0; i < v8; i++ {
			this.Data[i] = NewPopulatedDataPoint(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedWhisperDataItemList(r randyMetrics, easy bool) *WhisperDataItemList {
	this := &WhisperDataItemList{}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.Items = make([]*WhisperDataItem, v9)
		for i := 0; i < v9; i++ {
			this.Items[i] = NewPopulatedWhisperDataItem(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedWhisperRenderItem(r randyMetrics, easy bool) *WhisperRenderItem {
	this := &WhisperRenderItem{}
	this.RealStart = uint32(r.Uint32())
	this.RealEnd = uint32(r.Uint32())
	this.Start = uint32(r.Uint32())
	this.End = uint32(r.Uint32())
	this.From = uint32(r.Uint32())
	this.To = uint32(r.Uint32())
	this.Step = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		v10 := r.Intn(10)
		this.Series = make(map[string]*WhisperDataItem)
		for i := 0; i < v10; i++ {
			this.Series[randStringMetrics(r)] = NewPopulatedWhisperDataItem(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGraphiteApiItem(r randyMetrics, easy bool) *GraphiteApiItem {
	this := &GraphiteApiItem{}
	this.Target = randStringMetrics(r)
	this.InCache = bool(bool(r.Intn(2) == 0))
	this.UsingCache = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.Datapoints = make([]*DataPoint, v11)
		for i := 0; i < v11; i++ {
			this.Datapoints[i] = NewPopulatedDataPoint(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGraphiteApiItemList(r randyMetrics, easy bool) *GraphiteApiItemList {
	this := &GraphiteApiItemList{}
	if r.Intn(10) != 0 {
		v12 := r.Intn(5)
		this.Items = make([]*GraphiteApiItem, v12)
		for i := 0; i < v12; i++ {
			this.Items[i] = NewPopulatedGraphiteApiItem(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMetrics interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMetrics(r randyMetrics) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMetrics(r randyMetrics) string {
	v13 := r.Intn(100)
	tmps := make([]rune, v13)
	for i := 0; i < v13; i++ {
		tmps[i] = randUTF8RuneMetrics(r)
	}
	return string(tmps)
}
func randUnrecognizedMetrics(r randyMetrics, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldMetrics(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldMetrics(data []byte, r randyMetrics, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateMetrics(data, uint64(key))
		v14 := r.Int63()
		if r.Intn(2) == 0 {
			v14 *= -1
		}
		data = encodeVarintPopulateMetrics(data, uint64(v14))
	case 1:
		data = encodeVarintPopulateMetrics(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateMetrics(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateMetrics(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateMetrics(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateMetrics(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *DataPoint) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovMetrics(uint64(m.Time))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *DataPoints) Size() (n int) {
	var l int
	_ = l
	if len(m.Points) > 0 {
		for _, e := range m.Points {
			l = e.Size()
			n += 1 + l + sovMetrics(uint64(l))
		}
	}
	return n
}

func (m *RawDataPoint) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovMetrics(uint64(m.Time))
	}
	if m.Sum != 0 {
		n += 9
	}
	if m.Min != 0 {
		n += 9
	}
	if m.Max != 0 {
		n += 9
	}
	if m.Last != 0 {
		n += 9
	}
	if m.Count != 0 {
		n += 1 + sovMetrics(uint64(m.Count))
	}
	return n
}

func (m *RenderItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovMetrics(uint64(l))
	}
	if len(m.DataPoints) > 0 {
		for _, e := range m.DataPoints {
			l = e.Size()
			n += 1 + l + sovMetrics(uint64(l))
		}
	}
	return n
}

func (m *RenderItemList) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMetrics(uint64(l))
		}
	}
	return n
}

func (m *RawRenderItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Metric)
	if l > 0 {
		n += 1 + l + sovMetrics(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMetrics(uint64(l))
	}
	if m.RealStart != 0 {
		n += 1 + sovMetrics(uint64(m.RealStart))
	}
	if m.RealEnd != 0 {
		n += 1 + sovMetrics(uint64(m.RealEnd))
	}
	if m.Start != 0 {
		n += 1 + sovMetrics(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovMetrics(uint64(m.End))
	}
	if m.Step != 0 {
		n += 1 + sovMetrics(uint64(m.Step))
	}
	if m.AggFunc != 0 {
		n += 1 + sovMetrics(uint64(m.AggFunc))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovMetrics(uint64(l))
		}
	}
	if len(m.MetaTags) > 0 {
		for _, e := range m.MetaTags {
			l = e.Size()
			n += 1 + l + sovMetrics(uint64(l))
		}
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovMetrics(uint64(l))
		}
	}
	if m.InCache {
		n += 2
	}
	if m.UsingCache {
		n += 2
	}
	return n
}

func (m *RawRenderItemList) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMetrics(uint64(l))
		}
	}
	return n
}

func (m *WhisperDataItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovMetrics(uint64(l))
	}
	if m.InCache {
		n += 2
	}
	if m.UsingCache {
		n += 2
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovMetrics(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovMetrics(uint64(l))
		}
	}
	return n
}

func (m *WhisperDataItemList) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMetrics(uint64(l))
		}
	}
	return n
}

func (m *WhisperRenderItem) Size() (n int) {
	var l int
	_ = l
	if m.RealStart != 0 {
		n += 1 + sovMetrics(uint64(m.RealStart))
	}
	if m.RealEnd != 0 {
		n += 1 + sovMetrics(uint64(m.RealEnd))
	}
	if m.Start != 0 {
		n += 1 + sovMetrics(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovMetrics(uint64(m.End))
	}
	if m.From != 0 {
		n += 1 + sovMetrics(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovMetrics(uint64(m.To))
	}
	if m.Step != 0 {
		n += 1 + sovMetrics(uint64(m.Step))
	}
	if len(m.Series) > 0 {
		for k, v := range m.Series {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMetrics(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMetrics(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMetrics(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GraphiteApiItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovMetrics(uint64(l))
	}
	if m.InCache {
		n += 2
	}
	if m.UsingCache {
		n += 2
	}
	if len(m.Datapoints) > 0 {
		for _, e := range m.Datapoints {
			l = e.Size()
			n += 1 + l + sovMetrics(uint64(l))
		}
	}
	return n
}

func (m *GraphiteApiItemList) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMetrics(uint64(l))
		}
	}
	return n
}

func sovMetrics(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetrics(x uint64) (n int) {
	return sovMetrics(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataPoint) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataPoints) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataPoints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataPoints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Points = append(m.Points, &DataPoint{})
			if err := m.Points[len(m.Points)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawDataPoint) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawDataPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawDataPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Sum = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Min = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Max = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Last = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenderItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenderItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataPoints = append(m.DataPoints, &DataPoint{})
			if err := m.DataPoints[len(m.DataPoints)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenderItemList) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenderItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenderItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &RenderItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawRenderItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawRenderItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawRenderItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealStart", wireType)
			}
			m.RealStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RealStart |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealEnd", wireType)
			}
			m.RealEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RealEnd |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Start |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.End |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Step |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggFunc", wireType)
			}
			m.AggFunc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.AggFunc |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &repr.Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaTags = append(m.MetaTags, &repr.Tag{})
			if err := m.MetaTags[len(m.MetaTags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RawDataPoint{})
			if err := m.Data[len(m.Data)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InCache = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsingCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsingCache = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawRenderItemList) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawRenderItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawRenderItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &RawRenderItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhisperDataItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhisperDataItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhisperDataItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InCache = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsingCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsingCache = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &DataPoint{})
			if err := m.Data[len(m.Data)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhisperDataItemList) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhisperDataItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhisperDataItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &WhisperDataItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhisperRenderItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhisperRenderItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhisperRenderItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealStart", wireType)
			}
			m.RealStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RealStart |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealEnd", wireType)
			}
			m.RealEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RealEnd |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Start |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.End |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.From |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.To |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Step |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthMetrics
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Series == nil {
				m.Series = make(map[string]*WhisperDataItem)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetrics
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetrics
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthMetrics
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthMetrics
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &WhisperDataItem{}
				if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Series[mapkey] = mapvalue
			} else {
				var mapvalue *WhisperDataItem
				m.Series[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphiteApiItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphiteApiItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphiteApiItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InCache = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsingCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsingCache = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datapoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datapoints = append(m.Datapoints, &DataPoint{})
			if err := m.Datapoints[len(m.Datapoints)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphiteApiItemList) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphiteApiItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphiteApiItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &GraphiteApiItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetrics(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetrics
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetrics
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetrics(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetrics = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetrics   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("metrics.proto", fileDescriptorMetrics) }

var fileDescriptorMetrics = []byte{
	// 754 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x6e, 0x13, 0x3b,
	0x14, 0xee, 0xe4, 0x7f, 0x4e, 0x3a, 0xbd, 0xb7, 0xee, 0xbd, 0xd5, 0x10, 0x41, 0xa8, 0x46, 0xa2,
	0x14, 0x04, 0x89, 0x54, 0x84, 0x54, 0x81, 0x84, 0x54, 0xa0, 0x20, 0x24, 0x16, 0xc8, 0x45, 0x82,
	0x5d, 0xe5, 0x26, 0xee, 0xc4, 0xa2, 0x33, 0x13, 0xcd, 0x78, 0x4a, 0xbb, 0xe5, 0x09, 0xd8, 0xb3,
	0xe2, 0x4d, 0x58, 0xa1, 0x2e, 0x79, 0x04, 0x0a, 0xef, 0x80, 0x58, 0x62, 0x1f, 0x3b, 0xc9, 0x24,
	0xb4, 0x11, 0x1b, 0x16, 0x53, 0x9d, 0x73, 0xfc, 0xd9, 0x3e, 0xdf, 0x77, 0xbe, 0xb8, 0xe0, 0x45,
	0x5c, 0xa6, 0xa2, 0x97, 0x75, 0x86, 0x69, 0x22, 0x13, 0x52, 0xb7, 0x69, 0xeb, 0x5a, 0x8f, 0xf5,
	0x79, 0x2c, 0xbb, 0x19, 0x4f, 0x8f, 0x78, 0xda, 0xcd, 0x7a, 0x03, 0x1e, 0xb1, 0xac, 0x9b, 0xf2,
	0x61, 0x8a, 0x7f, 0x0c, 0xbe, 0x75, 0x3b, 0x14, 0x72, 0x90, 0xef, 0x77, 0x7a, 0x49, 0xd4, 0x0d,
	0x93, 0x30, 0xe9, 0x62, 0x79, 0x3f, 0x3f, 0xc0, 0x0c, 0x13, 0x8c, 0x0c, 0x3c, 0xb8, 0x0b, 0xee,
	0x63, 0x26, 0xd9, 0x8b, 0x44, 0xc4, 0x92, 0x10, 0xa8, 0x48, 0x11, 0x71, 0xdf, 0x59, 0x73, 0x36,
	0x3c, 0x8a, 0x31, 0xf9, 0x0f, 0xaa, 0x47, 0xec, 0x30, 0xe7, 0x7e, 0x49, 0x15, 0x1d, 0x6a, 0x92,
	0x60, 0x0b, 0x60, 0xbc, 0x2d, 0x23, 0x37, 0xa1, 0x36, 0xc4, 0x48, 0xed, 0x2c, 0x6f, 0x34, 0x37,
	0x49, 0x67, 0xc4, 0x61, 0x0c, 0xa2, 0x16, 0x11, 0xbc, 0x73, 0x60, 0x91, 0xb2, 0xb7, 0xf3, 0x2f,
	0xfd, 0x17, 0xca, 0x59, 0x1e, 0xf9, 0x65, 0xbc, 0x52, 0x87, 0xba, 0x12, 0x89, 0xd8, 0xaf, 0x98,
	0x8a, 0x0a, 0xb1, 0xc2, 0x8e, 0xfd, 0xaa, 0xad, 0xb0, 0x63, 0x7d, 0xd2, 0x21, 0xcb, 0xa4, 0x5f,
	0xc3, 0x12, 0xc6, 0xba, 0xfd, 0x5e, 0x92, 0xc7, 0xd2, 0xaf, 0xab, 0x62, 0x99, 0x9a, 0x24, 0x78,
	0x0d, 0x40, 0x79, 0xdc, 0xe7, 0xe9, 0x33, 0xc9, 0x23, 0xb2, 0x0a, 0x35, 0xc9, 0xd2, 0x90, 0x4b,
	0xec, 0xc1, 0xa5, 0x36, 0x23, 0x9b, 0x00, 0xfd, 0x31, 0x49, 0xc5, 0xff, 0x22, 0x6a, 0x88, 0xb2,
	0xf4, 0xee, 0xc3, 0xd2, 0xe4, 0xe4, 0xe7, 0x42, 0x75, 0x70, 0x03, 0xaa, 0x42, 0xc5, 0xa3, 0x03,
	0x56, 0xc6, 0x07, 0x4c, 0x70, 0xd4, 0x20, 0x82, 0x1f, 0x25, 0xf0, 0x94, 0x36, 0xd3, 0xad, 0x19,
	0xf8, 0xa8, 0x35, 0x93, 0x91, 0x25, 0x28, 0x89, 0x3e, 0x8e, 0xc4, 0xa5, 0x2a, 0x22, 0x57, 0xc0,
	0x4d, 0x39, 0x3b, 0xdc, 0x55, 0x9d, 0x4b, 0x94, 0xcd, 0xa3, 0xa0, 0x0b, 0x7b, 0x99, 0xae, 0x90,
	0x4b, 0x50, 0xd7, 0xd9, 0x4e, 0xdc, 0x47, 0x05, 0x3d, 0xda, 0xc0, 0x45, 0x75, 0x8f, 0x16, 0x08,
	0x31, 0x28, 0xa4, 0x47, 0x4d, 0xa2, 0xc5, 0x55, 0x8b, 0xa8, 0xa4, 0x47, 0x75, 0xa8, 0xc5, 0xcd,
	0x24, 0x1f, 0xa2, 0x8e, 0x6a, 0x4c, 0x3a, 0x26, 0x3e, 0xd4, 0x59, 0x18, 0x3e, 0xc9, 0xe3, 0x9e,
	0xdf, 0xc0, 0xf2, 0x28, 0x55, 0xfd, 0x54, 0x24, 0x0b, 0x33, 0xdf, 0x45, 0xce, 0x6e, 0x07, 0x0d,
	0xfa, 0x92, 0x85, 0x14, 0xcb, 0xe4, 0x3a, 0xb8, 0x8a, 0x08, 0xdb, 0x43, 0x0c, 0xcc, 0x62, 0x26,
	0x6b, 0x4a, 0xbc, 0x8a, 0x16, 0xd7, 0x6f, 0x22, 0xe6, 0xff, 0x89, 0x76, 0x05, 0x07, 0x51, 0x84,
	0x68, 0x8e, 0x22, 0x7e, 0xc4, 0xd4, 0xcf, 0xc2, 0x5f, 0x54, 0xcd, 0x34, 0x68, 0x43, 0xc4, 0x7b,
	0x3d, 0x9d, 0x93, 0xab, 0x00, 0x79, 0x26, 0xe2, 0xd0, 0xac, 0x7a, 0xb8, 0xda, 0xc4, 0x8a, 0x01,
	0x04, 0xdb, 0xb0, 0x3c, 0xa5, 0x3b, 0x0e, 0xee, 0xd6, 0x68, 0x70, 0xc6, 0xd4, 0xab, 0xc5, 0xcb,
	0x7f, 0x9f, 0xdd, 0x47, 0x07, 0xfe, 0x79, 0x35, 0x10, 0xd9, 0x90, 0xa7, 0xba, 0xb3, 0xb9, 0xc6,
	0x6a, 0xc1, 0xb8, 0x37, 0x9c, 0x61, 0xb1, 0xd7, 0x35, 0x28, 0x76, 0x86, 0xb3, 0x9c, 0x6e, 0x56,
	0xcf, 0x26, 0x17, 0x66, 0x90, 0x2e, 0xd5, 0x21, 0x59, 0xb7, 0x2a, 0x55, 0x2f, 0xb4, 0x28, 0xae,
	0x07, 0x3b, 0xb0, 0x32, 0xd3, 0x22, 0x12, 0xed, 0x4c, 0x13, 0xf5, 0xc7, 0xfb, 0x67, 0xc0, 0x23,
	0xaa, 0x9f, 0x4b, 0xb0, 0x6c, 0x97, 0x0a, 0x56, 0x6d, 0x43, 0xc1, 0x71, 0xf6, 0xd7, 0x5c, 0xf4,
	0xa0, 0x22, 0x3d, 0x32, 0x1d, 0x92, 0x3e, 0xd7, 0x84, 0xe5, 0x73, 0x4c, 0x58, 0x99, 0x32, 0xe1,
	0x41, 0x9a, 0x44, 0xd6, 0xab, 0x18, 0x2b, 0x54, 0x49, 0x26, 0xd6, 0xa9, 0xa6, 0x72, 0x9e, 0x55,
	0x1f, 0x40, 0x4d, 0x3d, 0x9c, 0x82, 0x67, 0xca, 0xa9, 0x9a, 0xe4, 0xfa, 0x2c, 0xc9, 0x09, 0x93,
	0xce, 0x2e, 0x02, 0x77, 0x62, 0x99, 0x9e, 0x50, 0xbb, 0xab, 0xb5, 0x0b, 0xcd, 0x42, 0x59, 0xb7,
	0xf6, 0x86, 0x9f, 0xd8, 0xb1, 0xea, 0x50, 0x8b, 0x38, 0x79, 0x27, 0xe7, 0x8a, 0x88, 0xb0, 0x7b,
	0xa5, 0x2d, 0x27, 0xf8, 0xa0, 0x3c, 0xf3, 0x34, 0x65, 0xc3, 0x81, 0xd2, 0x75, 0x7b, 0x28, 0xfe,
	0xa2, 0x67, 0xec, 0x53, 0x66, 0x5f, 0xe9, 0xca, 0x1f, 0x3d, 0x65, 0xca, 0x2d, 0x33, 0xcd, 0xcd,
	0x77, 0xcb, 0x0c, 0xd8, 0xba, 0xe5, 0xe1, 0xe5, 0xd3, 0xb3, 0xf6, 0xc2, 0xcf, 0xb3, 0xb6, 0xf3,
	0xe9, 0x5b, 0xdb, 0x39, 0x55, 0xdf, 0x17, 0xf5, 0x7d, 0x55, 0xdf, 0xfb, 0xef, 0xed, 0x85, 0xfd,
	0x1a, 0xfe, 0x1b, 0xba, 0xf3, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x92, 0xe5, 0xc2, 0x8f, 0xf6, 0x06,
	0x00, 0x00,
}
