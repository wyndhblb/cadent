// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package metrics

import (
	repr "cadent/server/schemas/repr"
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson16bbae25DecodeCadentServerSchemasMetrics(in *jlexer.Lexer, out *GraphiteApiItemList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Items = make([]*GraphiteApiItem, 0, 8)
				} else {
					out.Items = []*GraphiteApiItem{}
				}
				for !in.IsDelim(']') {
					var v1 *GraphiteApiItem
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(GraphiteApiItem)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v1).UnmarshalJSON(data))
						}
					}
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16bbae25EncodeCadentServerSchemasMetrics(out *jwriter.Writer, in GraphiteApiItemList) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"items\":")
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v3).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GraphiteApiItemList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16bbae25EncodeCadentServerSchemasMetrics(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GraphiteApiItemList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16bbae25EncodeCadentServerSchemasMetrics(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GraphiteApiItemList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16bbae25DecodeCadentServerSchemasMetrics(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GraphiteApiItemList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16bbae25DecodeCadentServerSchemasMetrics(l, v)
}
func easyjson16bbae25DecodeCadentServerSchemasMetrics1(in *jlexer.Lexer, out *GraphiteApiItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "target":
			out.Target = string(in.String())
		case "in_cache":
			out.InCache = bool(in.Bool())
		case "using_cache":
			out.UsingCache = bool(in.Bool())
		case "datapoints":
			if in.IsNull() {
				in.Skip()
				out.Datapoints = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Datapoints = make([]*DataPoint, 0, 8)
				} else {
					out.Datapoints = []*DataPoint{}
				}
				for !in.IsDelim(']') {
					var v4 *DataPoint
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(DataPoint)
						}
						easyjson16bbae25DecodeCadentServerSchemasMetrics2(in, &*v4)
					}
					out.Datapoints = append(out.Datapoints, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16bbae25EncodeCadentServerSchemasMetrics1(out *jwriter.Writer, in GraphiteApiItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Target != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"target\":")
		out.String(string(in.Target))
	}
	if in.InCache {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"in_cache\":")
		out.Bool(bool(in.InCache))
	}
	if in.UsingCache {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"using_cache\":")
		out.Bool(bool(in.UsingCache))
	}
	if len(in.Datapoints) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"datapoints\":")
		if in.Datapoints == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Datapoints {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v6).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GraphiteApiItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16bbae25EncodeCadentServerSchemasMetrics1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GraphiteApiItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16bbae25EncodeCadentServerSchemasMetrics1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GraphiteApiItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16bbae25DecodeCadentServerSchemasMetrics1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GraphiteApiItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16bbae25DecodeCadentServerSchemasMetrics1(l, v)
}
func easyjson16bbae25DecodeCadentServerSchemasMetrics2(in *jlexer.Lexer, out *DataPoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = uint32(in.Uint32())
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16bbae25EncodeCadentServerSchemasMetrics2(out *jwriter.Writer, in DataPoint) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Time != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"time\":")
		out.Uint32(uint32(in.Time))
	}
	if in.Value != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}
func easyjson16bbae25DecodeCadentServerSchemasMetrics3(in *jlexer.Lexer, out *WhisperDataItemList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Items = make([]*WhisperDataItem, 0, 8)
				} else {
					out.Items = []*WhisperDataItem{}
				}
				for !in.IsDelim(']') {
					var v7 *WhisperDataItem
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(WhisperDataItem)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v7).UnmarshalJSON(data))
						}
					}
					out.Items = append(out.Items, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16bbae25EncodeCadentServerSchemasMetrics3(out *jwriter.Writer, in WhisperDataItemList) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"items\":")
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Items {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v9).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WhisperDataItemList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16bbae25EncodeCadentServerSchemasMetrics3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WhisperDataItemList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16bbae25EncodeCadentServerSchemasMetrics3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WhisperDataItemList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16bbae25DecodeCadentServerSchemasMetrics3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WhisperDataItemList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16bbae25DecodeCadentServerSchemasMetrics3(l, v)
}
func easyjson16bbae25DecodeCadentServerSchemasMetrics4(in *jlexer.Lexer, out *WhisperDataItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "target":
			out.Target = string(in.String())
		case "in_cache":
			out.InCache = bool(in.Bool())
		case "using_cache":
			out.UsingCache = bool(in.Bool())
		case "uid":
			out.Uid = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Data = make([]*DataPoint, 0, 8)
				} else {
					out.Data = []*DataPoint{}
				}
				for !in.IsDelim(']') {
					var v10 *DataPoint
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(DataPoint)
						}
						easyjson16bbae25DecodeCadentServerSchemasMetrics2(in, &*v10)
					}
					out.Data = append(out.Data, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16bbae25EncodeCadentServerSchemasMetrics4(out *jwriter.Writer, in WhisperDataItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Target != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"target\":")
		out.String(string(in.Target))
	}
	if in.InCache {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"in_cache\":")
		out.Bool(bool(in.InCache))
	}
	if in.UsingCache {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"using_cache\":")
		out.Bool(bool(in.UsingCache))
	}
	if in.Uid != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"uid\":")
		out.String(string(in.Uid))
	}
	if len(in.Data) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"data\":")
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Data {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v12).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WhisperDataItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16bbae25EncodeCadentServerSchemasMetrics4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WhisperDataItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16bbae25EncodeCadentServerSchemasMetrics4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WhisperDataItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16bbae25DecodeCadentServerSchemasMetrics4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WhisperDataItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16bbae25DecodeCadentServerSchemasMetrics4(l, v)
}
func easyjson16bbae25DecodeCadentServerSchemasMetrics5(in *jlexer.Lexer, out *RawRenderItemList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Items = make([]*RawRenderItem, 0, 8)
				} else {
					out.Items = []*RawRenderItem{}
				}
				for !in.IsDelim(']') {
					var v13 *RawRenderItem
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(RawRenderItem)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v13).UnmarshalJSON(data))
						}
					}
					out.Items = append(out.Items, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16bbae25EncodeCadentServerSchemasMetrics5(out *jwriter.Writer, in RawRenderItemList) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"items\":")
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Items {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v15).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawRenderItemList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16bbae25EncodeCadentServerSchemasMetrics5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawRenderItemList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16bbae25EncodeCadentServerSchemasMetrics5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawRenderItemList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16bbae25DecodeCadentServerSchemasMetrics5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawRenderItemList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16bbae25DecodeCadentServerSchemasMetrics5(l, v)
}
func easyjson16bbae25DecodeCadentServerSchemasMetrics6(in *jlexer.Lexer, out *RawRenderItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metric":
			out.Metric = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "real_start":
			out.RealStart = uint32(in.Uint32())
		case "real_end":
			out.RealEnd = uint32(in.Uint32())
		case "start":
			out.Start = uint32(in.Uint32())
		case "end":
			out.End = uint32(in.Uint32())
		case "step":
			out.Step = uint32(in.Uint32())
		case "agg_func":
			out.AggFunc = uint32(in.Uint32())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Tags = make([]*repr.Tag, 0, 8)
				} else {
					out.Tags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v16 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v16).UnmarshalJSON(data))
						}
					}
					out.Tags = append(out.Tags, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta_tags":
			if in.IsNull() {
				in.Skip()
				out.MetaTags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.MetaTags = make([]*repr.Tag, 0, 8)
				} else {
					out.MetaTags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v17 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v17 = nil
					} else {
						if v17 == nil {
							v17 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v17).UnmarshalJSON(data))
						}
					}
					out.MetaTags = append(out.MetaTags, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Data = make([]*RawDataPoint, 0, 8)
				} else {
					out.Data = []*RawDataPoint{}
				}
				for !in.IsDelim(']') {
					var v18 *RawDataPoint
					if in.IsNull() {
						in.Skip()
						v18 = nil
					} else {
						if v18 == nil {
							v18 = new(RawDataPoint)
						}
						easyjson16bbae25DecodeCadentServerSchemasMetrics7(in, &*v18)
					}
					out.Data = append(out.Data, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "in_cache":
			out.InCache = bool(in.Bool())
		case "using_cache":
			out.UsingCache = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16bbae25EncodeCadentServerSchemasMetrics6(out *jwriter.Writer, in RawRenderItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Metric != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"metric\":")
		out.String(string(in.Metric))
	}
	if in.Id != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.Id))
	}
	if in.RealStart != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"real_start\":")
		out.Uint32(uint32(in.RealStart))
	}
	if in.RealEnd != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"real_end\":")
		out.Uint32(uint32(in.RealEnd))
	}
	if in.Start != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"start\":")
		out.Uint32(uint32(in.Start))
	}
	if in.End != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"end\":")
		out.Uint32(uint32(in.End))
	}
	if in.Step != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"step\":")
		out.Uint32(uint32(in.Step))
	}
	if in.AggFunc != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"agg_func\":")
		out.Uint32(uint32(in.AggFunc))
	}
	if len(in.Tags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tags\":")
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.Tags {
				if v19 > 0 {
					out.RawByte(',')
				}
				if v20 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v20).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.MetaTags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"meta_tags\":")
		if in.MetaTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.MetaTags {
				if v21 > 0 {
					out.RawByte(',')
				}
				if v22 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v22).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Data) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"data\":")
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Data {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v24).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if in.InCache {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"in_cache\":")
		out.Bool(bool(in.InCache))
	}
	if in.UsingCache {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"using_cache\":")
		out.Bool(bool(in.UsingCache))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawRenderItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16bbae25EncodeCadentServerSchemasMetrics6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawRenderItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16bbae25EncodeCadentServerSchemasMetrics6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawRenderItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16bbae25DecodeCadentServerSchemasMetrics6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawRenderItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16bbae25DecodeCadentServerSchemasMetrics6(l, v)
}
func easyjson16bbae25DecodeCadentServerSchemasMetrics7(in *jlexer.Lexer, out *RawDataPoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = uint32(in.Uint32())
		case "sum":
			out.Sum = float64(in.Float64())
		case "min":
			out.Min = float64(in.Float64())
		case "max":
			out.Max = float64(in.Float64())
		case "last":
			out.Last = float64(in.Float64())
		case "count":
			out.Count = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16bbae25EncodeCadentServerSchemasMetrics7(out *jwriter.Writer, in RawDataPoint) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Time != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"time\":")
		out.Uint32(uint32(in.Time))
	}
	if in.Sum != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sum\":")
		out.Float64(float64(in.Sum))
	}
	if in.Min != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"min\":")
		out.Float64(float64(in.Min))
	}
	if in.Max != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"max\":")
		out.Float64(float64(in.Max))
	}
	if in.Last != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"last\":")
		out.Float64(float64(in.Last))
	}
	if in.Count != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"count\":")
		out.Int64(int64(in.Count))
	}
	out.RawByte('}')
}
func easyjson16bbae25DecodeCadentServerSchemasMetrics8(in *jlexer.Lexer, out *RenderItemList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Items = make([]*RenderItem, 0, 8)
				} else {
					out.Items = []*RenderItem{}
				}
				for !in.IsDelim(']') {
					var v25 *RenderItem
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(RenderItem)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v25).UnmarshalJSON(data))
						}
					}
					out.Items = append(out.Items, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16bbae25EncodeCadentServerSchemasMetrics8(out *jwriter.Writer, in RenderItemList) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"items\":")
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Items {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v27).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RenderItemList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16bbae25EncodeCadentServerSchemasMetrics8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RenderItemList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16bbae25EncodeCadentServerSchemasMetrics8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RenderItemList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16bbae25DecodeCadentServerSchemasMetrics8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RenderItemList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16bbae25DecodeCadentServerSchemasMetrics8(l, v)
}
func easyjson16bbae25DecodeCadentServerSchemasMetrics9(in *jlexer.Lexer, out *RenderItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "target":
			out.Target = string(in.String())
		case "dataPoints":
			if in.IsNull() {
				in.Skip()
				out.DataPoints = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.DataPoints = make([]*DataPoint, 0, 8)
				} else {
					out.DataPoints = []*DataPoint{}
				}
				for !in.IsDelim(']') {
					var v28 *DataPoint
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						if v28 == nil {
							v28 = new(DataPoint)
						}
						easyjson16bbae25DecodeCadentServerSchemasMetrics2(in, &*v28)
					}
					out.DataPoints = append(out.DataPoints, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16bbae25EncodeCadentServerSchemasMetrics9(out *jwriter.Writer, in RenderItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Target != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"target\":")
		out.String(string(in.Target))
	}
	if len(in.DataPoints) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dataPoints\":")
		if in.DataPoints == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.DataPoints {
				if v29 > 0 {
					out.RawByte(',')
				}
				if v30 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v30).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RenderItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson16bbae25EncodeCadentServerSchemasMetrics9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RenderItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16bbae25EncodeCadentServerSchemasMetrics9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RenderItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson16bbae25DecodeCadentServerSchemasMetrics9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RenderItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16bbae25DecodeCadentServerSchemasMetrics9(l, v)
}
