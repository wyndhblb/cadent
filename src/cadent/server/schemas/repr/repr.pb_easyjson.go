// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package repr

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjsonCee91ed5DecodeCadentServerSchemasRepr(in *jlexer.Lexer, out *StatRepr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(StatName)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Name).UnmarshalJSON(data))
				}
			}
		case "time":
			out.Time = int64(in.Int64())
		case "min":
			out.Min = float64(in.Float64())
		case "max":
			out.Max = float64(in.Float64())
		case "last":
			out.Last = float64(in.Float64())
		case "sum":
			out.Sum = float64(in.Float64())
		case "count":
			out.Count = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCee91ed5EncodeCadentServerSchemasRepr(out *jwriter.Writer, in StatRepr) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		if in.Name == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Name).MarshalJSON())
		}
	}
	if in.Time != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"time\":")
		out.Int64(int64(in.Time))
	}
	if in.Min != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"min\":")
		out.Float64(CheckFloat(float64(in.Min)))
	}
	if in.Max != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"max\":")
		out.Float64(CheckFloat(float64(in.Max)))
	}
	if in.Last != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"last\":")
		out.Float64(CheckFloat(float64(in.Last)))
	}
	if in.Sum != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sum\":")
		out.Float64(CheckFloat(float64(in.Sum)))
	}
	if in.Count != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"count\":")
		out.Int64(int64(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatRepr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCee91ed5EncodeCadentServerSchemasRepr(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatRepr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCee91ed5EncodeCadentServerSchemasRepr(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatRepr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCee91ed5DecodeCadentServerSchemasRepr(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatRepr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCee91ed5DecodeCadentServerSchemasRepr(l, v)
}
func easyjsonCee91ed5DecodeCadentServerSchemasRepr1(in *jlexer.Lexer, out *StatName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "resolution":
			out.Resolution = uint32(in.Uint32())
		case "ttl":
			out.Ttl = uint32(in.Uint32())
		case "tagMode":
			out.TagMode = TagMode(in.Int32())
		case "hashMode":
			out.HashMode = HashMode(in.Int32())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Tags = make(SortingTags, 0, 8)
				} else {
					out.Tags = SortingTags{}
				}
				for !in.IsDelim(']') {
					var v1 *Tag
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v1).UnmarshalJSON(data))
						}
					}
					out.Tags = append(out.Tags, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta_tags":
			if in.IsNull() {
				in.Skip()
				out.MetaTags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.MetaTags = make(SortingTags, 0, 8)
				} else {
					out.MetaTags = SortingTags{}
				}
				for !in.IsDelim(']') {
					var v2 *Tag
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v2).UnmarshalJSON(data))
						}
					}
					out.MetaTags = append(out.MetaTags, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCee91ed5EncodeCadentServerSchemasRepr1(out *jwriter.Writer, in StatName) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"key\":")
		out.String(string(in.Key))
	}
	if in.Resolution != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"resolution\":")
		out.Uint32(uint32(in.Resolution))
	}
	if in.Ttl != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ttl\":")
		out.Uint32(uint32(in.Ttl))
	}
	if in.TagMode != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tagMode\":")
		out.Int32(int32(in.TagMode))
	}
	if in.HashMode != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"hashMode\":")
		out.Int32(int32(in.HashMode))
	}
	if len(in.Tags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tags\":")
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Tags {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v4).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.MetaTags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"meta_tags\":")
		if in.MetaTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.MetaTags {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v6).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatName) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCee91ed5EncodeCadentServerSchemasRepr1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatName) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCee91ed5EncodeCadentServerSchemasRepr1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatName) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCee91ed5DecodeCadentServerSchemasRepr1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatName) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCee91ed5DecodeCadentServerSchemasRepr1(l, v)
}
func easyjsonCee91ed5DecodeCadentServerSchemasRepr2(in *jlexer.Lexer, out *Tag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCee91ed5EncodeCadentServerSchemasRepr2(out *jwriter.Writer, in Tag) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Value != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tag) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCee91ed5EncodeCadentServerSchemasRepr2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tag) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCee91ed5EncodeCadentServerSchemasRepr2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tag) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCee91ed5DecodeCadentServerSchemasRepr2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tag) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCee91ed5DecodeCadentServerSchemasRepr2(l, v)
}
