// Code generated by protoc-gen-gogo.
// source: repr.proto
// DO NOT EDIT!

/*
	Package repr is a generated protocol buffer package.

	It is generated from these files:
		repr.proto

	It has these top-level messages:
		Tag
		StatName
		StatRepr
*/
package repr

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TagMode int32

const (
	TagMode_METRICS2 TagMode = 0
	TagMode_ALL      TagMode = 1
)

var TagMode_name = map[int32]string{
	0: "METRICS2",
	1: "ALL",
}
var TagMode_value = map[string]int32{
	"METRICS2": 0,
	"ALL":      1,
}

func (x TagMode) String() string {
	return proto.EnumName(TagMode_name, int32(x))
}
func (TagMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorRepr, []int{0} }

type HashMode int32

const (
	HashMode_FNV  HashMode = 0
	HashMode_FARM HashMode = 1
)

var HashMode_name = map[int32]string{
	0: "FNV",
	1: "FARM",
}
var HashMode_value = map[string]int32{
	"FNV":  0,
	"FARM": 1,
}

func (x HashMode) String() string {
	return proto.EnumName(HashMode_name, int32(x))
}
func (HashMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorRepr, []int{1} }

type Tag struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptorRepr, []int{0} }

type StatName struct {
	Key             string      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_uniqueId    uint64      `protobuf:"varint,2,opt,name=uniqueId,proto3" json:"-" msg:"-"`
	XXX_uniqueIdstr string      `protobuf:"bytes,3,opt,name=uniqueIdstr,proto3" json:"-"  msg:"-"`
	Resolution      uint32      `protobuf:"varint,4,opt,name=resolution,proto3" json:"resolution,omitempty"`
	Ttl             uint32      `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	TagMode         TagMode     `protobuf:"varint,6,opt,name=tagMode,proto3,enum=repr.TagMode" json:"tagMode,omitempty"`
	HashMode        HashMode    `protobuf:"varint,7,opt,name=hashMode,proto3,enum=repr.HashMode" json:"hashMode,omitempty"`
	Tags            SortingTags `protobuf:"bytes,13,rep,name=tags" json:"tags,omitempty"`
	MetaTags        SortingTags `protobuf:"bytes,14,rep,name=meta_tags,json=metaTags" json:"meta_tags,omitempty"`
}

func (m *StatName) Reset()                    { *m = StatName{} }
func (m *StatName) String() string            { return proto.CompactTextString(m) }
func (*StatName) ProtoMessage()               {}
func (*StatName) Descriptor() ([]byte, []int) { return fileDescriptorRepr, []int{1} }

type StatRepr struct {
	Name  *StatName `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Time  int64     `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Min   float64   `protobuf:"fixed64,3,opt,name=min,proto3" json:"min,omitempty"`
	Max   float64   `protobuf:"fixed64,4,opt,name=max,proto3" json:"max,omitempty"`
	Last  float64   `protobuf:"fixed64,5,opt,name=last,proto3" json:"last,omitempty"`
	Sum   float64   `protobuf:"fixed64,6,opt,name=sum,proto3" json:"sum,omitempty"`
	Count int64     `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *StatRepr) Reset()                    { *m = StatRepr{} }
func (m *StatRepr) String() string            { return proto.CompactTextString(m) }
func (*StatRepr) ProtoMessage()               {}
func (*StatRepr) Descriptor() ([]byte, []int) { return fileDescriptorRepr, []int{2} }

func init() {
	proto.RegisterType((*Tag)(nil), "repr.Tag")
	proto.RegisterType((*StatName)(nil), "repr.StatName")
	proto.RegisterType((*StatRepr)(nil), "repr.StatRepr")
	proto.RegisterEnum("repr.TagMode", TagMode_name, TagMode_value)
	proto.RegisterEnum("repr.HashMode", HashMode_name, HashMode_value)
}
func (m *Tag) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Tag) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRepr(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Value) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintRepr(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	return i, nil
}

func (m *StatName) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatName) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintRepr(data, i, uint64(len(m.Key)))
		i += copy(data[i:], m.Key)
	}
	if m.XXX_uniqueId != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintRepr(data, i, uint64(m.XXX_uniqueId))
	}
	if len(m.XXX_uniqueIdstr) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintRepr(data, i, uint64(len(m.XXX_uniqueIdstr)))
		i += copy(data[i:], m.XXX_uniqueIdstr)
	}
	if m.Resolution != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintRepr(data, i, uint64(m.Resolution))
	}
	if m.Ttl != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintRepr(data, i, uint64(m.Ttl))
	}
	if m.TagMode != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintRepr(data, i, uint64(m.TagMode))
	}
	if m.HashMode != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintRepr(data, i, uint64(m.HashMode))
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			data[i] = 0x6a
			i++
			i = encodeVarintRepr(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MetaTags) > 0 {
		for _, msg := range m.MetaTags {
			data[i] = 0x72
			i++
			i = encodeVarintRepr(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StatRepr) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatRepr) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		data[i] = 0xa
		i++
		i = encodeVarintRepr(data, i, uint64(m.Name.Size()))
		n1, err := m.Name.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Time != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintRepr(data, i, uint64(m.Time))
	}
	if m.Min != 0 {
		data[i] = 0x19
		i++
		i = encodeFixed64Repr(data, i, uint64(math.Float64bits(float64(m.Min))))
	}
	if m.Max != 0 {
		data[i] = 0x21
		i++
		i = encodeFixed64Repr(data, i, uint64(math.Float64bits(float64(m.Max))))
	}
	if m.Last != 0 {
		data[i] = 0x29
		i++
		i = encodeFixed64Repr(data, i, uint64(math.Float64bits(float64(m.Last))))
	}
	if m.Sum != 0 {
		data[i] = 0x31
		i++
		i = encodeFixed64Repr(data, i, uint64(math.Float64bits(float64(m.Sum))))
	}
	if m.Count != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintRepr(data, i, uint64(m.Count))
	}
	return i, nil
}

func encodeFixed64Repr(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Repr(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRepr(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedTag(r randyRepr, easy bool) *Tag {
	this := &Tag{}
	this.Name = randStringRepr(r)
	this.Value = randStringRepr(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatName(r randyRepr, easy bool) *StatName {
	this := &StatName{}
	this.Key = randStringRepr(r)
	this.XXX_uniqueId = uint64(uint64(r.Uint32()))
	this.XXX_uniqueIdstr = randStringRepr(r)
	this.Resolution = uint32(r.Uint32())
	this.Ttl = uint32(r.Uint32())
	this.TagMode = TagMode([]int32{0, 1}[r.Intn(2)])
	this.HashMode = HashMode([]int32{0, 1}[r.Intn(2)])
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Tags = make([]*Tag, v1)
		for i := 0; i < v1; i++ {
			this.Tags[i] = NewPopulatedTag(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.MetaTags = make([]*Tag, v2)
		for i := 0; i < v2; i++ {
			this.MetaTags[i] = NewPopulatedTag(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatRepr(r randyRepr, easy bool) *StatRepr {
	this := &StatRepr{}
	if r.Intn(10) != 0 {
		this.Name = NewPopulatedStatName(r, easy)
	}
	this.Time = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Time *= -1
	}
	this.Min = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Min *= -1
	}
	this.Max = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Max *= -1
	}
	this.Last = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Last *= -1
	}
	this.Sum = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Sum *= -1
	}
	this.Count = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Count *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyRepr interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRepr(r randyRepr) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRepr(r randyRepr) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneRepr(r)
	}
	return string(tmps)
}
func randUnrecognizedRepr(r randyRepr, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldRepr(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldRepr(data []byte, r randyRepr, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateRepr(data, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		data = encodeVarintPopulateRepr(data, uint64(v4))
	case 1:
		data = encodeVarintPopulateRepr(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateRepr(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateRepr(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateRepr(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateRepr(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Tag) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRepr(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRepr(uint64(l))
	}
	return n
}

func (m *StatName) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRepr(uint64(l))
	}
	if m.XXX_uniqueId != 0 {
		n += 1 + sovRepr(uint64(m.XXX_uniqueId))
	}
	l = len(m.XXX_uniqueIdstr)
	if l > 0 {
		n += 1 + l + sovRepr(uint64(l))
	}
	if m.Resolution != 0 {
		n += 1 + sovRepr(uint64(m.Resolution))
	}
	if m.Ttl != 0 {
		n += 1 + sovRepr(uint64(m.Ttl))
	}
	if m.TagMode != 0 {
		n += 1 + sovRepr(uint64(m.TagMode))
	}
	if m.HashMode != 0 {
		n += 1 + sovRepr(uint64(m.HashMode))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovRepr(uint64(l))
		}
	}
	if len(m.MetaTags) > 0 {
		for _, e := range m.MetaTags {
			l = e.Size()
			n += 1 + l + sovRepr(uint64(l))
		}
	}
	return n
}

func (m *StatRepr) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovRepr(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovRepr(uint64(m.Time))
	}
	if m.Min != 0 {
		n += 9
	}
	if m.Max != 0 {
		n += 9
	}
	if m.Last != 0 {
		n += 9
	}
	if m.Sum != 0 {
		n += 9
	}
	if m.Count != 0 {
		n += 1 + sovRepr(uint64(m.Count))
	}
	return n
}

func sovRepr(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRepr(x uint64) (n int) {
	return sovRepr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tag) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepr
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepr
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepr(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatName) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepr
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XXX_uniqueId", wireType)
			}
			m.XXX_uniqueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.XXX_uniqueId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XXX_uniqueIdstr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRepr
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_uniqueIdstr = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolution", wireType)
			}
			m.Resolution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Resolution |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Ttl |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagMode", wireType)
			}
			m.TagMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TagMode |= (TagMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashMode", wireType)
			}
			m.HashMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.HashMode |= (HashMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepr
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepr
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaTags = append(m.MetaTags, &Tag{})
			if err := m.MetaTags[len(m.MetaTags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRepr(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatRepr) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRepr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatRepr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatRepr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRepr
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &StatName{}
			}
			if err := m.Name.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Min = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Max = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Last = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Sum = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRepr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRepr(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRepr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRepr(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRepr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRepr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRepr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRepr
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRepr
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRepr(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRepr = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRepr   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("repr.proto", fileDescriptorRepr) }

var fileDescriptorRepr = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0xd6, 0x6e, 0xe3, 0x4c, 0x9a, 0x60, 0xad, 0x40, 0xb2, 0x10, 0x75, 0xac, 0x1c, 0x20,
	0x8a, 0xd4, 0x44, 0x84, 0x1b, 0xb7, 0x06, 0x51, 0x51, 0xa9, 0xe9, 0x61, 0x1b, 0xa1, 0xdc, 0xaa,
	0x4d, 0x6b, 0x1c, 0x8b, 0xd8, 0x1b, 0xec, 0x35, 0x2a, 0x6f, 0xc1, 0x33, 0xf0, 0x24, 0x1c, 0x7b,
	0xe4, 0xca, 0x25, 0x22, 0xe6, 0xc6, 0x13, 0x70, 0x44, 0x33, 0x1b, 0x47, 0x11, 0xb7, 0x6f, 0xbe,
	0x9f, 0xb5, 0xf7, 0x9b, 0x05, 0xc8, 0xc2, 0x55, 0x36, 0x58, 0x65, 0x4a, 0x2b, 0x6e, 0x23, 0x7e,
	0x7a, 0x1a, 0xc5, 0x7a, 0x51, 0xcc, 0x07, 0xb7, 0x2a, 0x19, 0x46, 0x2a, 0x52, 0x43, 0x12, 0xe7,
	0xc5, 0x07, 0x9a, 0x68, 0x20, 0x64, 0x42, 0xdd, 0x21, 0x58, 0x53, 0x19, 0x71, 0x0e, 0x76, 0x2a,
	0x93, 0xd0, 0x63, 0x01, 0xeb, 0x35, 0x04, 0x61, 0xfe, 0x18, 0x0e, 0x3f, 0xcb, 0x65, 0x11, 0x7a,
	0x07, 0x44, 0x9a, 0xa1, 0xfb, 0xf3, 0x00, 0x9c, 0x6b, 0x2d, 0xf5, 0x15, 0x5a, 0x5c, 0xb0, 0x3e,
	0x86, 0x5f, 0xb6, 0x29, 0x84, 0xfc, 0x25, 0x38, 0x45, 0x1a, 0x7f, 0x2a, 0xc2, 0x8b, 0x3b, 0xca,
	0xd9, 0xe3, 0x27, 0xe5, 0xba, 0x73, 0x3c, 0x9b, 0xcd, 0x6e, 0x2a, 0xfe, 0xcf, 0xba, 0xc3, 0x4e,
	0xc5, 0xce, 0xc6, 0x5f, 0x43, 0xb3, 0xc2, 0xb9, 0xce, 0x3c, 0x0b, 0x0f, 0x1b, 0x7b, 0xe5, 0xba,
	0xf3, 0x68, 0x3f, 0x95, 0xeb, 0xcc, 0x04, 0xf7, 0xcd, 0xdc, 0xc7, 0x06, 0x72, 0xb5, 0x2c, 0x74,
	0xac, 0x52, 0xcf, 0x0e, 0x58, 0xaf, 0x25, 0xf6, 0x18, 0xfc, 0x41, 0xad, 0x97, 0xde, 0x21, 0x09,
	0x08, 0xf9, 0x0b, 0xa8, 0x6b, 0x19, 0x4d, 0xd4, 0x5d, 0xe8, 0x1d, 0x05, 0xac, 0xd7, 0x1e, 0xb5,
	0x06, 0xd4, 0xe1, 0xd4, 0x90, 0xa2, 0x52, 0x79, 0x1f, 0x9c, 0x85, 0xcc, 0x17, 0xe4, 0xac, 0x93,
	0xb3, 0x6d, 0x9c, 0xef, 0xb6, 0xac, 0xd8, 0xe9, 0xfc, 0x04, 0x6c, 0x2d, 0xa3, 0xdc, 0x6b, 0x05,
	0x56, 0xaf, 0x39, 0x6a, 0xec, 0x4e, 0x14, 0x44, 0xf3, 0xe7, 0xd0, 0x48, 0x42, 0x2d, 0x6f, 0xc8,
	0xd3, 0xfe, 0xdf, 0xe3, 0xa0, 0x36, 0x95, 0x51, 0xde, 0xfd, 0xc6, 0x4c, 0xb7, 0x22, 0x5c, 0x65,
	0xbc, 0xbb, 0xb7, 0x92, 0x66, 0xf5, 0xed, 0xaa, 0xf9, 0xed, 0x8a, 0x38, 0xd8, 0x3a, 0x4e, 0xcc,
	0x86, 0x2c, 0x41, 0x18, 0xaf, 0x9c, 0xc4, 0x29, 0xd5, 0xc8, 0x04, 0x42, 0x62, 0xe4, 0x3d, 0xb5,
	0x83, 0x8c, 0xbc, 0xc7, 0xdc, 0x52, 0xe6, 0x9a, 0x7a, 0x61, 0x82, 0x30, 0xba, 0xf2, 0x22, 0xa1,
	0x52, 0x98, 0x40, 0x88, 0x0f, 0xe0, 0x56, 0x15, 0xa9, 0xa6, 0xeb, 0x5b, 0xc2, 0x0c, 0xfd, 0x00,
	0xea, 0xdb, 0xae, 0xf8, 0x31, 0x38, 0x93, 0xb7, 0x53, 0x71, 0xf1, 0xe6, 0x7a, 0xe4, 0xd6, 0x78,
	0x1d, 0xac, 0xb3, 0xcb, 0x4b, 0x97, 0xf5, 0x4f, 0xc0, 0xa9, 0x3a, 0x42, 0xf2, 0xfc, 0xea, 0xbd,
	0x5b, 0xe3, 0x0e, 0xd8, 0xe7, 0x67, 0x62, 0xe2, 0xb2, 0xf1, 0xb3, 0x87, 0x8d, 0x5f, 0xfb, 0xbb,
	0xf1, 0xd9, 0xf7, 0xd2, 0x67, 0x0f, 0xa5, 0xcf, 0x7e, 0x94, 0x3e, 0xfb, 0x55, 0xfa, 0xec, 0xeb,
	0x6f, 0xbf, 0x36, 0x3f, 0xa2, 0x77, 0xf9, 0xea, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x26, 0xa3,
	0x73, 0x60, 0xda, 0x02, 0x00, 0x00,
}
