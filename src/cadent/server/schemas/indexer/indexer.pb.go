// Code generated by protoc-gen-gogo.
// source: indexer.proto
// DO NOT EDIT!

/*
	Package indexer is a generated protocol buffer package.

	It is generated from these files:
		indexer.proto

	It has these top-level messages:
		MetricFindItem
		MetricFindItemList
		MetricExpandItem
		MetricTagItem
		MetricTagItemList
*/
package indexer

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import repr "cadent/server/schemas/repr"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MetricFindItem struct {
	Text          string      `protobuf:"bytes,1,opt,name=text,proto3" json:"text" msg:"text"`
	Expandable    uint32      `protobuf:"varint,2,opt,name=expandable,proto3" json:"expandable" msg:"expandable"`
	Leaf          uint32      `protobuf:"varint,3,opt,name=leaf,proto3" json:"leaf" msg:"leaf"`
	Path          string      `protobuf:"bytes,4,opt,name=path,proto3" json:"path" msg:"path"`
	AllowChildren uint32      `protobuf:"varint,5,opt,name=allowChildren,proto3" json:"allowChildren" msg:"allowChildren"`
	Id            string      `protobuf:"bytes,6,opt,name=id,proto3" json:"id" msg:"id"`
	UniqueId      string      `protobuf:"bytes,7,opt,name=uniqueId,json=uniqueid,proto3" json:"uniqueid"  msg:"uniqueid"`
	Tags          []*repr.Tag `protobuf:"bytes,13,rep,name=tags" json:"tags,omitempty" msg:"tags"`
	MetaTags      []*repr.Tag `protobuf:"bytes,14,rep,name=metaTags,json=meta_tags" json:"meta_tags,omitempty" msg:"meta_tags"`
}

func (m *MetricFindItem) Reset()                    { *m = MetricFindItem{} }
func (m *MetricFindItem) String() string            { return proto.CompactTextString(m) }
func (*MetricFindItem) ProtoMessage()               {}
func (*MetricFindItem) Descriptor() ([]byte, []int) { return fileDescriptorIndexer, []int{0} }

type MetricFindItemList struct {
	Items []*MetricFindItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty" msg:"items"`
}

func (m *MetricFindItemList) Reset()                    { *m = MetricFindItemList{} }
func (m *MetricFindItemList) String() string            { return proto.CompactTextString(m) }
func (*MetricFindItemList) ProtoMessage()               {}
func (*MetricFindItemList) Descriptor() ([]byte, []int) { return fileDescriptorIndexer, []int{1} }

type MetricExpandItem struct {
	Results []string `protobuf:"bytes,2,rep,name=results" json:"results,omitempty" msg:"results"`
}

func (m *MetricExpandItem) Reset()                    { *m = MetricExpandItem{} }
func (m *MetricExpandItem) String() string            { return proto.CompactTextString(m) }
func (*MetricExpandItem) ProtoMessage()               {}
func (*MetricExpandItem) Descriptor() ([]byte, []int) { return fileDescriptorIndexer, []int{2} }

type MetricTagItem struct {
	Id     string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"  msg:"id"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"  msg:"name"`
	Value  string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"  msg:"value"`
	IsMeta bool   `protobuf:"varint,5,opt,name=isMeta,json=is_meta,proto3" json:"is_meta,omitempty"  msg:"is_meta"`
}

func (m *MetricTagItem) Reset()                    { *m = MetricTagItem{} }
func (m *MetricTagItem) String() string            { return proto.CompactTextString(m) }
func (*MetricTagItem) ProtoMessage()               {}
func (*MetricTagItem) Descriptor() ([]byte, []int) { return fileDescriptorIndexer, []int{3} }

type MetricTagItemList struct {
	Items []*MetricTagItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty" msg:"items"`
}

func (m *MetricTagItemList) Reset()                    { *m = MetricTagItemList{} }
func (m *MetricTagItemList) String() string            { return proto.CompactTextString(m) }
func (*MetricTagItemList) ProtoMessage()               {}
func (*MetricTagItemList) Descriptor() ([]byte, []int) { return fileDescriptorIndexer, []int{4} }

func init() {
	proto.RegisterType((*MetricFindItem)(nil), "indexer.MetricFindItem")
	proto.RegisterType((*MetricFindItemList)(nil), "indexer.MetricFindItemList")
	proto.RegisterType((*MetricExpandItem)(nil), "indexer.MetricExpandItem")
	proto.RegisterType((*MetricTagItem)(nil), "indexer.MetricTagItem")
	proto.RegisterType((*MetricTagItemList)(nil), "indexer.MetricTagItemList")
}
func (m *MetricFindItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricFindItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintIndexer(data, i, uint64(len(m.Text)))
		i += copy(data[i:], m.Text)
	}
	if m.Expandable != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintIndexer(data, i, uint64(m.Expandable))
	}
	if m.Leaf != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintIndexer(data, i, uint64(m.Leaf))
	}
	if len(m.Path) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintIndexer(data, i, uint64(len(m.Path)))
		i += copy(data[i:], m.Path)
	}
	if m.AllowChildren != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintIndexer(data, i, uint64(m.AllowChildren))
	}
	if len(m.Id) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintIndexer(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.UniqueId) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintIndexer(data, i, uint64(len(m.UniqueId)))
		i += copy(data[i:], m.UniqueId)
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			data[i] = 0x6a
			i++
			i = encodeVarintIndexer(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MetaTags) > 0 {
		for _, msg := range m.MetaTags {
			data[i] = 0x72
			i++
			i = encodeVarintIndexer(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MetricFindItemList) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricFindItemList) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			data[i] = 0xa
			i++
			i = encodeVarintIndexer(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MetricExpandItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricExpandItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, s := range m.Results {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *MetricTagItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricTagItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintIndexer(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Name) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintIndexer(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Value) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintIndexer(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	if m.IsMeta {
		data[i] = 0x28
		i++
		if m.IsMeta {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MetricTagItemList) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricTagItemList) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			data[i] = 0xa
			i++
			i = encodeVarintIndexer(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Indexer(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Indexer(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintIndexer(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedMetricFindItem(r randyIndexer, easy bool) *MetricFindItem {
	this := &MetricFindItem{}
	this.Text = randStringIndexer(r)
	this.Expandable = uint32(r.Uint32())
	this.Leaf = uint32(r.Uint32())
	this.Path = randStringIndexer(r)
	this.AllowChildren = uint32(r.Uint32())
	this.Id = randStringIndexer(r)
	this.UniqueId = randStringIndexer(r)
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Tags = make([]*repr.Tag, v1)
		for i := 0; i < v1; i++ {
			this.Tags[i] = repr.NewPopulatedTag(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.MetaTags = make([]*repr.Tag, v2)
		for i := 0; i < v2; i++ {
			this.MetaTags[i] = repr.NewPopulatedTag(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMetricFindItemList(r randyIndexer, easy bool) *MetricFindItemList {
	this := &MetricFindItemList{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Items = make([]*MetricFindItem, v3)
		for i := 0; i < v3; i++ {
			this.Items[i] = NewPopulatedMetricFindItem(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMetricExpandItem(r randyIndexer, easy bool) *MetricExpandItem {
	this := &MetricExpandItem{}
	v4 := r.Intn(10)
	this.Results = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.Results[i] = randStringIndexer(r)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMetricTagItem(r randyIndexer, easy bool) *MetricTagItem {
	this := &MetricTagItem{}
	this.Id = randStringIndexer(r)
	this.Name = randStringIndexer(r)
	this.Value = randStringIndexer(r)
	this.IsMeta = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMetricTagItemList(r randyIndexer, easy bool) *MetricTagItemList {
	this := &MetricTagItemList{}
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.Items = make([]*MetricTagItem, v5)
		for i := 0; i < v5; i++ {
			this.Items[i] = NewPopulatedMetricTagItem(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyIndexer interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneIndexer(r randyIndexer) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringIndexer(r randyIndexer) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneIndexer(r)
	}
	return string(tmps)
}
func randUnrecognizedIndexer(r randyIndexer, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldIndexer(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldIndexer(data []byte, r randyIndexer, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateIndexer(data, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		data = encodeVarintPopulateIndexer(data, uint64(v7))
	case 1:
		data = encodeVarintPopulateIndexer(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateIndexer(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateIndexer(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateIndexer(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateIndexer(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *MetricFindItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovIndexer(uint64(l))
	}
	if m.Expandable != 0 {
		n += 1 + sovIndexer(uint64(m.Expandable))
	}
	if m.Leaf != 0 {
		n += 1 + sovIndexer(uint64(m.Leaf))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovIndexer(uint64(l))
	}
	if m.AllowChildren != 0 {
		n += 1 + sovIndexer(uint64(m.AllowChildren))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovIndexer(uint64(l))
	}
	l = len(m.UniqueId)
	if l > 0 {
		n += 1 + l + sovIndexer(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovIndexer(uint64(l))
		}
	}
	if len(m.MetaTags) > 0 {
		for _, e := range m.MetaTags {
			l = e.Size()
			n += 1 + l + sovIndexer(uint64(l))
		}
	}
	return n
}

func (m *MetricFindItemList) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovIndexer(uint64(l))
		}
	}
	return n
}

func (m *MetricExpandItem) Size() (n int) {
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, s := range m.Results {
			l = len(s)
			n += 1 + l + sovIndexer(uint64(l))
		}
	}
	return n
}

func (m *MetricTagItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovIndexer(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIndexer(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovIndexer(uint64(l))
	}
	if m.IsMeta {
		n += 2
	}
	return n
}

func (m *MetricTagItemList) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovIndexer(uint64(l))
		}
	}
	return n
}

func sovIndexer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIndexer(x uint64) (n int) {
	return sovIndexer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetricFindItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricFindItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricFindItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expandable", wireType)
			}
			m.Expandable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Expandable |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaf", wireType)
			}
			m.Leaf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Leaf |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowChildren", wireType)
			}
			m.AllowChildren = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.AllowChildren |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &repr.Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaTags = append(m.MetaTags, &repr.Tag{})
			if err := m.MetaTags[len(m.MetaTags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexer(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndexer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricFindItemList) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricFindItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricFindItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &MetricFindItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexer(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndexer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricExpandItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricExpandItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricExpandItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexer(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndexer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricTagItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricTagItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricTagItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMeta", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMeta = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipIndexer(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndexer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricTagItemList) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricTagItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricTagItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &MetricTagItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndexer(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndexer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndexer(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndexer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIndexer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIndexer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIndexer(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIndexer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndexer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("indexer.proto", fileDescriptorIndexer) }

var fileDescriptorIndexer = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x6e, 0x92, 0xe6, 0x6f, 0x90, 0x23, 0x58, 0x21, 0xba, 0x8a, 0xc0, 0xaa, 0x2c, 0x40, 0x3d,
	0xb4, 0xb1, 0x04, 0x4f, 0x00, 0x15, 0x48, 0x95, 0xe0, 0x62, 0xf5, 0x5e, 0xad, 0xe3, 0xa9, 0xb3,
	0x92, 0x7f, 0xc2, 0xee, 0xba, 0xe4, 0x05, 0xb8, 0xf3, 0x48, 0x1c, 0x7b, 0xe4, 0x11, 0x28, 0xbc,
	0x04, 0x47, 0x66, 0xc7, 0x2e, 0xaa, 0x73, 0xd8, 0xe8, 0x9b, 0x6f, 0xbe, 0xd9, 0x9d, 0xef, 0x8b,
	0x21, 0xd0, 0x55, 0x86, 0x3b, 0x34, 0xab, 0xad, 0xa9, 0x5d, 0x2d, 0xa6, 0x5d, 0xb9, 0x7c, 0xb5,
	0x56, 0x19, 0x56, 0x2e, 0xb6, 0x68, 0x6e, 0xd0, 0xc4, 0x76, 0xbd, 0xc1, 0x52, 0xd9, 0xd8, 0xe0,
	0xd6, 0xf0, 0x4f, 0xab, 0x5f, 0x9e, 0xe5, 0xda, 0x6d, 0x9a, 0x74, 0xb5, 0xae, 0xcb, 0x38, 0xaf,
	0xf3, 0x3a, 0x66, 0x3a, 0x6d, 0xae, 0xb9, 0xe2, 0x82, 0x51, 0x2b, 0x8f, 0xbe, 0x0d, 0x61, 0xf1,
	0x19, 0x9d, 0xd1, 0xeb, 0x8f, 0xf4, 0xd0, 0x85, 0xc3, 0x52, 0x08, 0x38, 0x74, 0xb8, 0x73, 0x72,
	0x70, 0x3c, 0x38, 0x99, 0x27, 0x8c, 0x45, 0x08, 0x80, 0xbb, 0xad, 0xaa, 0x32, 0x95, 0x16, 0x28,
	0x87, 0xd4, 0x09, 0x92, 0x07, 0x8c, 0x9f, 0x29, 0x50, 0x5d, 0xcb, 0x11, 0x77, 0x18, 0x7b, 0x6e,
	0xab, 0xdc, 0x46, 0x1e, 0xb6, 0xf7, 0x78, 0x2c, 0x5e, 0x42, 0xa0, 0x8a, 0xa2, 0xfe, 0x7a, 0xbe,
	0xd1, 0x45, 0x66, 0xb0, 0x92, 0x63, 0x1e, 0xe8, 0x93, 0x62, 0x01, 0x43, 0x9d, 0xc9, 0x09, 0xcf,
	0x11, 0x12, 0x4b, 0x98, 0x35, 0x95, 0xfe, 0xd2, 0xe0, 0x45, 0x26, 0xa7, 0xcc, 0x76, 0x35, 0xf5,
	0x5e, 0xd0, 0xb6, 0x2a, 0xb7, 0x32, 0x38, 0x1e, 0x9d, 0x3c, 0x7a, 0x33, 0x5f, 0x71, 0x14, 0x97,
	0x2a, 0x4f, 0x98, 0x16, 0xaf, 0x61, 0x56, 0xa2, 0x53, 0x97, 0x5e, 0xb2, 0xd8, 0x97, 0xcc, 0x7d,
	0xeb, 0xca, 0xeb, 0xa2, 0x73, 0x10, 0xfd, 0x18, 0x3e, 0x69, 0xeb, 0xc4, 0x19, 0x8c, 0x35, 0x61,
	0x4b, 0x59, 0xf8, 0xd1, 0xa3, 0xd5, 0xfd, 0x7f, 0xd3, 0xd7, 0x26, 0xad, 0x2a, 0x3a, 0x85, 0xc7,
	0x6d, 0xe3, 0x03, 0x27, 0xc3, 0x69, 0x4a, 0x98, 0x1a, 0xb4, 0x4d, 0xe1, 0x2c, 0xc5, 0x36, 0xa2,
	0xd5, 0xef, 0xcb, 0x28, 0x85, 0xa0, 0x55, 0xd3, 0x2a, 0x2c, 0x6d, 0x6d, 0x0f, 0xff, 0xdb, 0xa6,
	0x00, 0x2b, 0x55, 0x22, 0x87, 0x4a, 0x01, 0x7a, 0x2c, 0x9e, 0xc2, 0xf8, 0x46, 0x15, 0x0d, 0x76,
	0xa9, 0xb6, 0x85, 0x38, 0x82, 0x89, 0xb6, 0x74, 0x99, 0xe2, 0x3c, 0x67, 0xc9, 0x54, 0xdb, 0x2b,
	0xef, 0x2d, 0x7a, 0x07, 0x4f, 0x7a, 0x6f, 0xb0, 0xab, 0xd3, 0xbe, 0xab, 0x67, 0x7b, 0xae, 0x3a,
	0x69, 0x67, 0xea, 0xfd, 0xf3, 0xdb, 0xbb, 0xf0, 0xe0, 0xef, 0x5d, 0x38, 0xf8, 0xf1, 0x3b, 0x1c,
	0xdc, 0xd2, 0xf9, 0x49, 0xe7, 0x17, 0x9d, 0xef, 0x7f, 0xc2, 0x83, 0x74, 0xc2, 0x9f, 0xd1, 0xdb,
	0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x96, 0xcf, 0x22, 0xb6, 0x02, 0x00, 0x00,
}
