// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package indexer

import (
	repr "cadent/server/schemas/repr"
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson10066a7fDecodeCadentServerSchemasIndexer(in *jlexer.Lexer, out *MetricTagItemList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Items = make([]*MetricTagItem, 0, 8)
				} else {
					out.Items = []*MetricTagItem{}
				}
				for !in.IsDelim(']') {
					var v1 *MetricTagItem
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(MetricTagItem)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v1).UnmarshalJSON(data))
						}
					}
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10066a7fEncodeCadentServerSchemasIndexer(out *jwriter.Writer, in MetricTagItemList) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"items\":")
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v3).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetricTagItemList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10066a7fEncodeCadentServerSchemasIndexer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricTagItemList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10066a7fEncodeCadentServerSchemasIndexer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetricTagItemList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10066a7fDecodeCadentServerSchemasIndexer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricTagItemList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10066a7fDecodeCadentServerSchemasIndexer(l, v)
}
func easyjson10066a7fDecodeCadentServerSchemasIndexer1(in *jlexer.Lexer, out *MetricTagItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "is_meta":
			out.IsMeta = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10066a7fEncodeCadentServerSchemasIndexer1(out *jwriter.Writer, in MetricTagItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.Id))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Value != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.String(string(in.Value))
	}
	if in.IsMeta {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"is_meta\":")
		out.Bool(bool(in.IsMeta))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetricTagItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10066a7fEncodeCadentServerSchemasIndexer1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricTagItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10066a7fEncodeCadentServerSchemasIndexer1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetricTagItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10066a7fDecodeCadentServerSchemasIndexer1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricTagItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10066a7fDecodeCadentServerSchemasIndexer1(l, v)
}
func easyjson10066a7fDecodeCadentServerSchemasIndexer2(in *jlexer.Lexer, out *MetricExpandItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Results = make([]string, 0, 4)
				} else {
					out.Results = []string{}
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Results = append(out.Results, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10066a7fEncodeCadentServerSchemasIndexer2(out *jwriter.Writer, in MetricExpandItem) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Results) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"results\":")
		if in.Results == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Results {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetricExpandItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10066a7fEncodeCadentServerSchemasIndexer2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricExpandItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10066a7fEncodeCadentServerSchemasIndexer2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetricExpandItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10066a7fDecodeCadentServerSchemasIndexer2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricExpandItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10066a7fDecodeCadentServerSchemasIndexer2(l, v)
}
func easyjson10066a7fDecodeCadentServerSchemasIndexer3(in *jlexer.Lexer, out *MetricFindItemList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Items = make([]*MetricFindItem, 0, 8)
				} else {
					out.Items = []*MetricFindItem{}
				}
				for !in.IsDelim(']') {
					var v7 *MetricFindItem
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(MetricFindItem)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v7).UnmarshalJSON(data))
						}
					}
					out.Items = append(out.Items, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10066a7fEncodeCadentServerSchemasIndexer3(out *jwriter.Writer, in MetricFindItemList) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"items\":")
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Items {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v9).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetricFindItemList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10066a7fEncodeCadentServerSchemasIndexer3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricFindItemList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10066a7fEncodeCadentServerSchemasIndexer3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetricFindItemList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10066a7fDecodeCadentServerSchemasIndexer3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricFindItemList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10066a7fDecodeCadentServerSchemasIndexer3(l, v)
}
func easyjson10066a7fDecodeCadentServerSchemasIndexer4(in *jlexer.Lexer, out *MetricFindItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "expandable":
			out.Expandable = uint32(in.Uint32())
		case "leaf":
			out.Leaf = uint32(in.Uint32())
		case "path":
			out.Path = string(in.String())
		case "allowChildren":
			out.AllowChildren = uint32(in.Uint32())
		case "id":
			out.Id = string(in.String())
		case "uniqueid":
			out.UniqueId = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Tags = make([]*repr.Tag, 0, 8)
				} else {
					out.Tags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v10 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v10).UnmarshalJSON(data))
						}
					}
					out.Tags = append(out.Tags, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta_tags":
			if in.IsNull() {
				in.Skip()
				out.MetaTags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.MetaTags = make([]*repr.Tag, 0, 8)
				} else {
					out.MetaTags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v11 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v11).UnmarshalJSON(data))
						}
					}
					out.MetaTags = append(out.MetaTags, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10066a7fEncodeCadentServerSchemasIndexer4(out *jwriter.Writer, in MetricFindItem) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"text\":")
	out.String(string(in.Text))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"expandable\":")
	out.Uint32(uint32(in.Expandable))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"leaf\":")
	out.Uint32(uint32(in.Leaf))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"path\":")
	out.String(string(in.Path))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"allowChildren\":")
	out.Uint32(uint32(in.AllowChildren))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.Id))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"uniqueid\":")
	out.String(string(in.UniqueId))
	if len(in.Tags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tags\":")
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Tags {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v13).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.MetaTags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"meta_tags\":")
		if in.MetaTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.MetaTags {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v15).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetricFindItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10066a7fEncodeCadentServerSchemasIndexer4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricFindItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10066a7fEncodeCadentServerSchemasIndexer4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetricFindItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10066a7fDecodeCadentServerSchemasIndexer4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricFindItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10066a7fDecodeCadentServerSchemasIndexer4(l, v)
}
