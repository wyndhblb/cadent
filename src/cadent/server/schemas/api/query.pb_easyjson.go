// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package api

import (
	repr "cadent/server/schemas/repr"
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjsonF8321a0cDecodeCadentServerSchemasApi(in *jlexer.Lexer, out *DiscoverHosts) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hosts":
			if in.IsNull() {
				in.Skip()
				out.Hosts = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Hosts = make([]*DiscoverHost, 0, 8)
				} else {
					out.Hosts = []*DiscoverHost{}
				}
				for !in.IsDelim(']') {
					var v1 *DiscoverHost
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(DiscoverHost)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v1).UnmarshalJSON(data))
						}
					}
					out.Hosts = append(out.Hosts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF8321a0cEncodeCadentServerSchemasApi(out *jwriter.Writer, in DiscoverHosts) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Hosts) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"hosts\":")
		if in.Hosts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Hosts {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v3).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DiscoverHosts) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF8321a0cEncodeCadentServerSchemasApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DiscoverHosts) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF8321a0cEncodeCadentServerSchemasApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DiscoverHosts) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF8321a0cDecodeCadentServerSchemasApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DiscoverHosts) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF8321a0cDecodeCadentServerSchemasApi(l, v)
}
func easyjsonF8321a0cDecodeCadentServerSchemasApi1(in *jlexer.Lexer, out *DiscoverHost) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "advertiseName":
			out.AdvertiseName = string(in.String())
		case "advertiseUrl":
			out.AdvertiseUrl = string(in.String())
		case "grpchost":
			out.Grpchost = string(in.String())
		case "host":
			out.Host = string(in.String())
		case "hostApiUrl":
			out.HostApiUrl = string(in.String())
		case "startTime":
			out.StartTime = int64(in.Int64())
		case "resolutions":
			if in.IsNull() {
				in.Skip()
				out.Resolutions = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Resolutions = make([]*Resolution, 0, 8)
				} else {
					out.Resolutions = []*Resolution{}
				}
				for !in.IsDelim(']') {
					var v4 *Resolution
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Resolution)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v4).UnmarshalJSON(data))
						}
					}
					out.Resolutions = append(out.Resolutions, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "isApi":
			out.IsApi = bool(in.Bool())
		case "isWriter":
			out.IsWriter = bool(in.Bool())
		case "isReader":
			out.IsReader = bool(in.Bool())
		case "isHasher":
			out.IsHasher = bool(in.Bool())
		case "isTCPapi":
			out.IsTCPapi = bool(in.Bool())
		case "isgRPC":
			out.IsgRPC = bool(in.Bool())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Tags = make([]*repr.Tag, 0, 8)
				} else {
					out.Tags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v5 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v5).UnmarshalJSON(data))
						}
					}
					out.Tags = append(out.Tags, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF8321a0cEncodeCadentServerSchemasApi1(out *jwriter.Writer, in DiscoverHost) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AdvertiseName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"advertiseName\":")
		out.String(string(in.AdvertiseName))
	}
	if in.AdvertiseUrl != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"advertiseUrl\":")
		out.String(string(in.AdvertiseUrl))
	}
	if in.Grpchost != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"grpchost\":")
		out.String(string(in.Grpchost))
	}
	if in.Host != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"host\":")
		out.String(string(in.Host))
	}
	if in.HostApiUrl != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"hostApiUrl\":")
		out.String(string(in.HostApiUrl))
	}
	if in.StartTime != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"startTime\":")
		out.Int64(int64(in.StartTime))
	}
	if len(in.Resolutions) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"resolutions\":")
		if in.Resolutions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Resolutions {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v7).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if in.IsApi {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"isApi\":")
		out.Bool(bool(in.IsApi))
	}
	if in.IsWriter {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"isWriter\":")
		out.Bool(bool(in.IsWriter))
	}
	if in.IsReader {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"isReader\":")
		out.Bool(bool(in.IsReader))
	}
	if in.IsHasher {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"isHasher\":")
		out.Bool(bool(in.IsHasher))
	}
	if in.IsTCPapi {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"isTCPapi\":")
		out.Bool(bool(in.IsTCPapi))
	}
	if in.IsgRPC {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"isgRPC\":")
		out.Bool(bool(in.IsgRPC))
	}
	if len(in.Tags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tags\":")
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Tags {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v9).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DiscoverHost) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF8321a0cEncodeCadentServerSchemasApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DiscoverHost) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF8321a0cEncodeCadentServerSchemasApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DiscoverHost) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF8321a0cDecodeCadentServerSchemasApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DiscoverHost) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF8321a0cDecodeCadentServerSchemasApi1(l, v)
}
func easyjsonF8321a0cDecodeCadentServerSchemasApi2(in *jlexer.Lexer, out *Resolution) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resolution":
			out.Resolution = uint32(in.Uint32())
		case "ttl":
			out.Ttl = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF8321a0cEncodeCadentServerSchemasApi2(out *jwriter.Writer, in Resolution) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Resolution != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"resolution\":")
		out.Uint32(uint32(in.Resolution))
	}
	if in.Ttl != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ttl\":")
		out.Uint32(uint32(in.Ttl))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Resolution) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF8321a0cEncodeCadentServerSchemasApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Resolution) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF8321a0cEncodeCadentServerSchemasApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Resolution) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF8321a0cDecodeCadentServerSchemasApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Resolution) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF8321a0cDecodeCadentServerSchemasApi2(l, v)
}
func easyjsonF8321a0cDecodeCadentServerSchemasApi3(in *jlexer.Lexer, out *DiscoveryQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Tags = make([]*repr.Tag, 0, 8)
				} else {
					out.Tags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v10 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v10).UnmarshalJSON(data))
						}
					}
					out.Tags = append(out.Tags, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "format":
			out.Format = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF8321a0cEncodeCadentServerSchemasApi3(out *jwriter.Writer, in DiscoveryQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Host != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"host\":")
		out.String(string(in.Host))
	}
	if len(in.Tags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tags\":")
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Tags {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v12).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if in.Format != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"format\":")
		out.String(string(in.Format))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DiscoveryQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF8321a0cEncodeCadentServerSchemasApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DiscoveryQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF8321a0cEncodeCadentServerSchemasApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DiscoveryQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF8321a0cDecodeCadentServerSchemasApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DiscoveryQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF8321a0cDecodeCadentServerSchemasApi3(l, v)
}
func easyjsonF8321a0cDecodeCadentServerSchemasApi4(in *jlexer.Lexer, out *IndexQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query":
			out.Query = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "page":
			out.Page = uint32(in.Uint32())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Tags = make([]*repr.Tag, 0, 8)
				} else {
					out.Tags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v13 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v13).UnmarshalJSON(data))
						}
					}
					out.Tags = append(out.Tags, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hasData":
			out.HasData = bool(in.Bool())
		case "inCache":
			out.InCache = bool(in.Bool())
		case "format":
			out.Format = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF8321a0cEncodeCadentServerSchemasApi4(out *jwriter.Writer, in IndexQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Query != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"query\":")
		out.String(string(in.Query))
	}
	if in.Value != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.String(string(in.Value))
	}
	if in.Page != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"page\":")
		out.Uint32(uint32(in.Page))
	}
	if len(in.Tags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tags\":")
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Tags {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v15).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if in.HasData {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"hasData\":")
		out.Bool(bool(in.HasData))
	}
	if in.InCache {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"inCache\":")
		out.Bool(bool(in.InCache))
	}
	if in.Format != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"format\":")
		out.String(string(in.Format))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IndexQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF8321a0cEncodeCadentServerSchemasApi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IndexQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF8321a0cEncodeCadentServerSchemasApi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IndexQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF8321a0cDecodeCadentServerSchemasApi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IndexQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF8321a0cDecodeCadentServerSchemasApi4(l, v)
}
func easyjsonF8321a0cDecodeCadentServerSchemasApi5(in *jlexer.Lexer, out *MetricQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "target":
			out.Target = string(in.String())
		case "start":
			out.Start = int64(in.Int64())
		case "end":
			out.End = int64(in.Int64())
		case "step":
			out.Step = uint32(in.Uint32())
		case "agg":
			out.Agg = uint32(in.Uint32())
		case "maxPoints":
			out.MaxPoints = uint32(in.Uint32())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Tags = make([]*repr.Tag, 0, 8)
				} else {
					out.Tags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v16 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v16).UnmarshalJSON(data))
						}
					}
					out.Tags = append(out.Tags, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "inCache":
			out.InCache = bool(in.Bool())
		case "format":
			out.Format = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF8321a0cEncodeCadentServerSchemasApi5(out *jwriter.Writer, in MetricQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Target != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"target\":")
		out.String(string(in.Target))
	}
	if in.Start != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"start\":")
		out.Int64(int64(in.Start))
	}
	if in.End != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"end\":")
		out.Int64(int64(in.End))
	}
	if in.Step != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"step\":")
		out.Uint32(uint32(in.Step))
	}
	if in.Agg != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"agg\":")
		out.Uint32(uint32(in.Agg))
	}
	if in.MaxPoints != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"maxPoints\":")
		out.Uint32(uint32(in.MaxPoints))
	}
	if len(in.Tags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tags\":")
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Tags {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v18).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if in.InCache {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"inCache\":")
		out.Bool(bool(in.InCache))
	}
	if in.Format != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"format\":")
		out.String(string(in.Format))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetricQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF8321a0cEncodeCadentServerSchemasApi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF8321a0cEncodeCadentServerSchemasApi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetricQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF8321a0cDecodeCadentServerSchemasApi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF8321a0cDecodeCadentServerSchemasApi5(l, v)
}
