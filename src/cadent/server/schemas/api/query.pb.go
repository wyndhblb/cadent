// Code generated by protoc-gen-gogo.
// source: query.proto
// DO NOT EDIT!

/*
	Package api is a generated protocol buffer package.

	It is generated from these files:
		query.proto

	It has these top-level messages:
		MetricQuery
		IndexQuery
		DiscoveryQuery
		Resolution
		DiscoverHost
		DiscoverHosts
*/
package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import repr "cadent/server/schemas/repr"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// MetricQuery elements for a metric render query
type MetricQuery struct {
	Target    string      `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Start     int64       `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End       int64       `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	Step      uint32      `protobuf:"varint,4,opt,name=step,proto3" json:"step,omitempty"`
	Agg       uint32      `protobuf:"varint,5,opt,name=agg,proto3" json:"agg,omitempty"`
	MaxPoints uint32      `protobuf:"varint,6,opt,name=maxPoints,json=max_points,proto3" json:"maxPoints,omitempty"`
	Tags      []*repr.Tag `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty"`
	InCache   bool        `protobuf:"varint,8,opt,name=inCache,json=in_cache,proto3" json:"inCache,omitempty"`
	Format    string      `protobuf:"bytes,9,opt,name=format,proto3" json:"format,omitempty"`
}

func (m *MetricQuery) Reset()                    { *m = MetricQuery{} }
func (m *MetricQuery) String() string            { return proto.CompactTextString(m) }
func (*MetricQuery) ProtoMessage()               {}
func (*MetricQuery) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{0} }

// IndexQuery elements for a find/index query
type IndexQuery struct {
	Query   string      `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Value   string      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Page    uint32      `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Tags    []*repr.Tag `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	HasData bool        `protobuf:"varint,5,opt,name=hasData,json=has_data,proto3" json:"hasData,omitempty"`
	InCache bool        `protobuf:"varint,6,opt,name=inCache,json=in_cache,proto3" json:"inCache,omitempty"`
	Format  string      `protobuf:"bytes,7,opt,name=format,proto3" json:"format,omitempty"`
}

func (m *IndexQuery) Reset()                    { *m = IndexQuery{} }
func (m *IndexQuery) String() string            { return proto.CompactTextString(m) }
func (*IndexQuery) ProtoMessage()               {}
func (*IndexQuery) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{1} }

// DiscoveryQuery elements for a finding nodes in the dosciver module
type DiscoveryQuery struct {
	Host   string      `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Tags   []*repr.Tag `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	Format string      `protobuf:"bytes,6,opt,name=format,proto3" json:"format,omitempty"`
}

func (m *DiscoveryQuery) Reset()                    { *m = DiscoveryQuery{} }
func (m *DiscoveryQuery) String() string            { return proto.CompactTextString(m) }
func (*DiscoveryQuery) ProtoMessage()               {}
func (*DiscoveryQuery) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{2} }

// Resolution definition
type Resolution struct {
	Resolution uint32 `protobuf:"varint,1,opt,name=resolution,proto3" json:"resolution,omitempty"`
	Ttl        uint32 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (m *Resolution) Reset()                    { *m = Resolution{} }
func (m *Resolution) String() string            { return proto.CompactTextString(m) }
func (*Resolution) ProtoMessage()               {}
func (*Resolution) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{3} }

// DiscoverHost the discover data
type DiscoverHost struct {
	AdvertiseName string        `protobuf:"bytes,1,opt,name=advertiseName,json=advertise_name,proto3" json:"advertiseName,omitempty"`
	AdvertiseUrl  string        `protobuf:"bytes,2,opt,name=advertiseUrl,json=advertise_url,proto3" json:"advertiseUrl,omitempty"`
	Grpchost      string        `protobuf:"bytes,3,opt,name=grpchost,json=grpc_host,proto3" json:"grpchost,omitempty"`
	Host          string        `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	HostApiUrl    string        `protobuf:"bytes,5,opt,name=hostApiUrl,json=host_api_url,proto3" json:"hostApiUrl,omitempty"`
	StartTime     int64         `protobuf:"varint,6,opt,name=startTime,json=start_time,proto3" json:"startTime,omitempty"`
	Resolutions   []*Resolution `protobuf:"bytes,7,rep,name=resolutions" json:"resolutions,omitempty"`
	IsApi         bool          `protobuf:"varint,8,opt,name=isApi,json=is_api,proto3" json:"isApi,omitempty"`
	IsWriter      bool          `protobuf:"varint,9,opt,name=isWriter,json=is_writer,proto3" json:"isWriter,omitempty"`
	IsReader      bool          `protobuf:"varint,10,opt,name=isReader,json=is_reader,proto3" json:"isReader,omitempty"`
	IsHasher      bool          `protobuf:"varint,11,opt,name=isHasher,json=is_hasher,proto3" json:"isHasher,omitempty"`
	IsTCPapi      bool          `protobuf:"varint,12,opt,name=isTCPapi,json=is_tcpapi,proto3" json:"isTCPapi,omitempty"`
	IsgRPC        bool          `protobuf:"varint,13,opt,name=isgRPC,json=is_grpc,proto3" json:"isgRPC,omitempty"`
	Tags          []*repr.Tag   `protobuf:"bytes,14,rep,name=tags" json:"tags,omitempty"`
}

func (m *DiscoverHost) Reset()                    { *m = DiscoverHost{} }
func (m *DiscoverHost) String() string            { return proto.CompactTextString(m) }
func (*DiscoverHost) ProtoMessage()               {}
func (*DiscoverHost) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{4} }

type DiscoverHosts struct {
	Hosts []*DiscoverHost `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *DiscoverHosts) Reset()                    { *m = DiscoverHosts{} }
func (m *DiscoverHosts) String() string            { return proto.CompactTextString(m) }
func (*DiscoverHosts) ProtoMessage()               {}
func (*DiscoverHosts) Descriptor() ([]byte, []int) { return fileDescriptorQuery, []int{5} }

func init() {
	proto.RegisterType((*MetricQuery)(nil), "api.MetricQuery")
	proto.RegisterType((*IndexQuery)(nil), "api.IndexQuery")
	proto.RegisterType((*DiscoveryQuery)(nil), "api.DiscoveryQuery")
	proto.RegisterType((*Resolution)(nil), "api.Resolution")
	proto.RegisterType((*DiscoverHost)(nil), "api.DiscoverHost")
	proto.RegisterType((*DiscoverHosts)(nil), "api.DiscoverHosts")
}
func (m *MetricQuery) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *MetricQuery) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintQuery(data, i, uint64(len(m.Target)))
		i += copy(data[i:], m.Target)
	}
	if m.Start != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintQuery(data, i, uint64(m.Start))
	}
	if m.End != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintQuery(data, i, uint64(m.End))
	}
	if m.Step != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintQuery(data, i, uint64(m.Step))
	}
	if m.Agg != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintQuery(data, i, uint64(m.Agg))
	}
	if m.MaxPoints != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintQuery(data, i, uint64(m.MaxPoints))
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			data[i] = 0x3a
			i++
			i = encodeVarintQuery(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.InCache {
		data[i] = 0x40
		i++
		if m.InCache {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Format) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintQuery(data, i, uint64(len(m.Format)))
		i += copy(data[i:], m.Format)
	}
	return i, nil
}

func (m *IndexQuery) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *IndexQuery) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintQuery(data, i, uint64(len(m.Query)))
		i += copy(data[i:], m.Query)
	}
	if len(m.Value) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintQuery(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	if m.Page != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintQuery(data, i, uint64(m.Page))
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			data[i] = 0x22
			i++
			i = encodeVarintQuery(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HasData {
		data[i] = 0x28
		i++
		if m.HasData {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.InCache {
		data[i] = 0x30
		i++
		if m.InCache {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Format) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintQuery(data, i, uint64(len(m.Format)))
		i += copy(data[i:], m.Format)
	}
	return i, nil
}

func (m *DiscoveryQuery) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DiscoveryQuery) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Host) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintQuery(data, i, uint64(len(m.Host)))
		i += copy(data[i:], m.Host)
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			data[i] = 0x22
			i++
			i = encodeVarintQuery(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Format) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintQuery(data, i, uint64(len(m.Format)))
		i += copy(data[i:], m.Format)
	}
	return i, nil
}

func (m *Resolution) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Resolution) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resolution != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintQuery(data, i, uint64(m.Resolution))
	}
	if m.Ttl != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintQuery(data, i, uint64(m.Ttl))
	}
	return i, nil
}

func (m *DiscoverHost) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DiscoverHost) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AdvertiseName) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintQuery(data, i, uint64(len(m.AdvertiseName)))
		i += copy(data[i:], m.AdvertiseName)
	}
	if len(m.AdvertiseUrl) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintQuery(data, i, uint64(len(m.AdvertiseUrl)))
		i += copy(data[i:], m.AdvertiseUrl)
	}
	if len(m.Grpchost) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintQuery(data, i, uint64(len(m.Grpchost)))
		i += copy(data[i:], m.Grpchost)
	}
	if len(m.Host) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintQuery(data, i, uint64(len(m.Host)))
		i += copy(data[i:], m.Host)
	}
	if len(m.HostApiUrl) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintQuery(data, i, uint64(len(m.HostApiUrl)))
		i += copy(data[i:], m.HostApiUrl)
	}
	if m.StartTime != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintQuery(data, i, uint64(m.StartTime))
	}
	if len(m.Resolutions) > 0 {
		for _, msg := range m.Resolutions {
			data[i] = 0x3a
			i++
			i = encodeVarintQuery(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsApi {
		data[i] = 0x40
		i++
		if m.IsApi {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.IsWriter {
		data[i] = 0x48
		i++
		if m.IsWriter {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.IsReader {
		data[i] = 0x50
		i++
		if m.IsReader {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.IsHasher {
		data[i] = 0x58
		i++
		if m.IsHasher {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.IsTCPapi {
		data[i] = 0x60
		i++
		if m.IsTCPapi {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.IsgRPC {
		data[i] = 0x68
		i++
		if m.IsgRPC {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			data[i] = 0x72
			i++
			i = encodeVarintQuery(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DiscoverHosts) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DiscoverHosts) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hosts) > 0 {
		for _, msg := range m.Hosts {
			data[i] = 0xa
			i++
			i = encodeVarintQuery(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Query(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Query(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintQuery(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedMetricQuery(r randyQuery, easy bool) *MetricQuery {
	this := &MetricQuery{}
	this.Target = randStringQuery(r)
	this.Start = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Start *= -1
	}
	this.End = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.End *= -1
	}
	this.Step = uint32(r.Uint32())
	this.Agg = uint32(r.Uint32())
	this.MaxPoints = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Tags = make([]*repr.Tag, v1)
		for i := 0; i < v1; i++ {
			this.Tags[i] = repr.NewPopulatedTag(r, easy)
		}
	}
	this.InCache = bool(bool(r.Intn(2) == 0))
	this.Format = randStringQuery(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedIndexQuery(r randyQuery, easy bool) *IndexQuery {
	this := &IndexQuery{}
	this.Query = randStringQuery(r)
	this.Value = randStringQuery(r)
	this.Page = uint32(r.Uint32())
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Tags = make([]*repr.Tag, v2)
		for i := 0; i < v2; i++ {
			this.Tags[i] = repr.NewPopulatedTag(r, easy)
		}
	}
	this.HasData = bool(bool(r.Intn(2) == 0))
	this.InCache = bool(bool(r.Intn(2) == 0))
	this.Format = randStringQuery(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDiscoveryQuery(r randyQuery, easy bool) *DiscoveryQuery {
	this := &DiscoveryQuery{}
	this.Host = randStringQuery(r)
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.Tags = make([]*repr.Tag, v3)
		for i := 0; i < v3; i++ {
			this.Tags[i] = repr.NewPopulatedTag(r, easy)
		}
	}
	this.Format = randStringQuery(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedResolution(r randyQuery, easy bool) *Resolution {
	this := &Resolution{}
	this.Resolution = uint32(r.Uint32())
	this.Ttl = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDiscoverHost(r randyQuery, easy bool) *DiscoverHost {
	this := &DiscoverHost{}
	this.AdvertiseName = randStringQuery(r)
	this.AdvertiseUrl = randStringQuery(r)
	this.Grpchost = randStringQuery(r)
	this.Host = randStringQuery(r)
	this.HostApiUrl = randStringQuery(r)
	this.StartTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.StartTime *= -1
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Resolutions = make([]*Resolution, v4)
		for i := 0; i < v4; i++ {
			this.Resolutions[i] = NewPopulatedResolution(r, easy)
		}
	}
	this.IsApi = bool(bool(r.Intn(2) == 0))
	this.IsWriter = bool(bool(r.Intn(2) == 0))
	this.IsReader = bool(bool(r.Intn(2) == 0))
	this.IsHasher = bool(bool(r.Intn(2) == 0))
	this.IsTCPapi = bool(bool(r.Intn(2) == 0))
	this.IsgRPC = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		v5 := r.Intn(5)
		this.Tags = make([]*repr.Tag, v5)
		for i := 0; i < v5; i++ {
			this.Tags[i] = repr.NewPopulatedTag(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDiscoverHosts(r randyQuery, easy bool) *DiscoverHosts {
	this := &DiscoverHosts{}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Hosts = make([]*DiscoverHost, v6)
		for i := 0; i < v6; i++ {
			this.Hosts[i] = NewPopulatedDiscoverHost(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyQuery interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneQuery(r randyQuery) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringQuery(r randyQuery) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RuneQuery(r)
	}
	return string(tmps)
}
func randUnrecognizedQuery(r randyQuery, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldQuery(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldQuery(data []byte, r randyQuery, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateQuery(data, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		data = encodeVarintPopulateQuery(data, uint64(v8))
	case 1:
		data = encodeVarintPopulateQuery(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateQuery(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateQuery(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateQuery(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateQuery(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *MetricQuery) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovQuery(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovQuery(uint64(m.End))
	}
	if m.Step != 0 {
		n += 1 + sovQuery(uint64(m.Step))
	}
	if m.Agg != 0 {
		n += 1 + sovQuery(uint64(m.Agg))
	}
	if m.MaxPoints != 0 {
		n += 1 + sovQuery(uint64(m.MaxPoints))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.InCache {
		n += 2
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *IndexQuery) Size() (n int) {
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.HasData {
		n += 2
	}
	if m.InCache {
		n += 2
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DiscoveryQuery) Size() (n int) {
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *Resolution) Size() (n int) {
	var l int
	_ = l
	if m.Resolution != 0 {
		n += 1 + sovQuery(uint64(m.Resolution))
	}
	if m.Ttl != 0 {
		n += 1 + sovQuery(uint64(m.Ttl))
	}
	return n
}

func (m *DiscoverHost) Size() (n int) {
	var l int
	_ = l
	l = len(m.AdvertiseName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AdvertiseUrl)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Grpchost)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.HostApiUrl)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovQuery(uint64(m.StartTime))
	}
	if len(m.Resolutions) > 0 {
		for _, e := range m.Resolutions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.IsApi {
		n += 2
	}
	if m.IsWriter {
		n += 2
	}
	if m.IsReader {
		n += 2
	}
	if m.IsHasher {
		n += 2
	}
	if m.IsTCPapi {
		n += 2
	}
	if m.IsgRPC {
		n += 2
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *DiscoverHosts) Size() (n int) {
	var l int
	_ = l
	if len(m.Hosts) > 0 {
		for _, e := range m.Hosts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetricQuery) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.End |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Step |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agg", wireType)
			}
			m.Agg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Agg |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPoints", wireType)
			}
			m.MaxPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MaxPoints |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &repr.Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InCache = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexQuery) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &repr.Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasData = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InCache = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoveryQuery) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoveryQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoveryQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &repr.Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resolution) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resolution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resolution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolution", wireType)
			}
			m.Resolution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Resolution |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Ttl |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoverHost) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoverHost: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoverHost: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertiseName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertiseUrl = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grpchost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grpchost = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostApiUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostApiUrl = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolutions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resolutions = append(m.Resolutions, &Resolution{})
			if err := m.Resolutions[len(m.Resolutions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsApi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsApi = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWriter", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWriter = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReader = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHasher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHasher = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTCPapi", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTCPapi = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsgRPC", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsgRPC = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &repr.Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoverHosts) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoverHosts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoverHosts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hosts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hosts = append(m.Hosts, &DiscoverHost{})
			if err := m.Hosts[len(m.Hosts)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQuery(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQuery = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("query.proto", fileDescriptorQuery) }

var fileDescriptorQuery = []byte{
	// 664 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x71, 0xfe, 0x3c, 0x49, 0x0a, 0xac, 0x0a, 0x98, 0x42, 0xad, 0x28, 0xa8, 0x22, 0x17,
	0x12, 0x01, 0x17, 0x4e, 0x48, 0xa5, 0x3d, 0x94, 0x03, 0xa8, 0xac, 0x8a, 0x38, 0x70, 0xb0, 0xa6,
	0xce, 0xd6, 0x5e, 0x29, 0xfe, 0x61, 0x77, 0x13, 0xda, 0xb7, 0xe0, 0x75, 0xb8, 0x21, 0x4e, 0x3d,
	0xf2, 0x08, 0x34, 0xf0, 0x10, 0x1c, 0xd1, 0x8e, 0x13, 0x27, 0x95, 0xa8, 0xb8, 0x24, 0xf3, 0x7d,
	0x33, 0x3b, 0xfb, 0x7d, 0xb3, 0x23, 0x43, 0xfb, 0xd3, 0x54, 0xa8, 0xf3, 0x61, 0xa1, 0x72, 0x93,
	0x33, 0x17, 0x0b, 0xb9, 0xbd, 0x1b, 0xe1, 0x58, 0x64, 0x66, 0xa4, 0x85, 0x9a, 0x09, 0x35, 0xd2,
	0x51, 0x22, 0x52, 0xd4, 0x23, 0x25, 0x0a, 0x45, 0x3f, 0x65, 0xed, 0xf6, 0x93, 0x58, 0x9a, 0x64,
	0x7a, 0x32, 0x8c, 0xf2, 0x74, 0x14, 0xe7, 0x71, 0x3e, 0x22, 0xfa, 0x64, 0x7a, 0x4a, 0x88, 0x00,
	0x45, 0x65, 0x79, 0xff, 0xb7, 0x03, 0xed, 0x37, 0xc2, 0x28, 0x19, 0xbd, 0xb3, 0x17, 0xb2, 0xbb,
	0xd0, 0x30, 0xa8, 0x62, 0x61, 0x7c, 0xa7, 0xe7, 0x0c, 0x3c, 0xbe, 0x40, 0x6c, 0x0b, 0xea, 0xda,
	0xa0, 0x32, 0xfe, 0x8d, 0x9e, 0x33, 0x70, 0x79, 0x09, 0xd8, 0x2d, 0x70, 0x45, 0x36, 0xf6, 0x5d,
	0xe2, 0x6c, 0xc8, 0x18, 0xd4, 0xb4, 0x11, 0x85, 0x5f, 0xeb, 0x39, 0x83, 0x2e, 0xa7, 0xd8, 0x56,
	0x61, 0x1c, 0xfb, 0x75, 0xa2, 0x6c, 0xc8, 0x76, 0xc0, 0x4b, 0xf1, 0xec, 0x28, 0x97, 0x99, 0xd1,
	0x7e, 0x83, 0x78, 0x48, 0xf1, 0x2c, 0x2c, 0x88, 0x61, 0x3b, 0x50, 0x33, 0x18, 0x6b, 0xbf, 0xd9,
	0x73, 0x07, 0xed, 0x67, 0xde, 0x90, 0xec, 0x1d, 0x63, 0xcc, 0x89, 0x66, 0xf7, 0xa1, 0x29, 0xb3,
	0x7d, 0x8c, 0x12, 0xe1, 0xb7, 0x7a, 0xce, 0xa0, 0xc5, 0x5b, 0x32, 0x0b, 0x23, 0x8b, 0xad, 0xfc,
	0xd3, 0x5c, 0xa5, 0x68, 0x7c, 0xaf, 0x94, 0x5f, 0xa2, 0xfe, 0x57, 0x07, 0xe0, 0x75, 0x36, 0x16,
	0x67, 0xa5, 0xcb, 0x2d, 0xa8, 0xd3, 0x7c, 0x17, 0x26, 0x4b, 0x60, 0xd9, 0x19, 0x4e, 0xa6, 0x82,
	0x3c, 0x7a, 0xbc, 0x04, 0xd6, 0x51, 0x81, 0xb1, 0x20, 0x93, 0x5d, 0x4e, 0x71, 0x25, 0xb0, 0x76,
	0xad, 0xc0, 0x04, 0xf5, 0x01, 0x1a, 0x24, 0xd3, 0x2d, 0xde, 0x4a, 0x50, 0x87, 0x63, 0x34, 0xb8,
	0xae, 0xbd, 0x71, 0xad, 0xf6, 0xe6, 0x15, 0xed, 0x1f, 0x61, 0xf3, 0x40, 0xea, 0x28, 0x9f, 0x09,
	0x75, 0x5e, 0xca, 0x67, 0x50, 0x4b, 0x72, 0xbd, 0x7c, 0x22, 0x8a, 0xff, 0x27, 0x69, 0xd5, 0xbc,
	0x71, 0xa5, 0xf9, 0x4b, 0x00, 0x2e, 0x74, 0x3e, 0x99, 0x1a, 0x99, 0x67, 0x2c, 0x00, 0x50, 0x15,
	0xa2, 0xf6, 0x5d, 0xbe, 0xc6, 0xd8, 0x97, 0x34, 0x66, 0x42, 0xf3, 0xe9, 0x72, 0x1b, 0xf6, 0xbf,
	0xbb, 0xd0, 0x59, 0xaa, 0x3b, 0xb4, 0x3a, 0x76, 0xa1, 0x8b, 0xe3, 0x99, 0x50, 0x46, 0x6a, 0xf1,
	0x16, 0x53, 0xb1, 0x10, 0xb9, 0x59, 0x91, 0x61, 0x86, 0xa9, 0x60, 0x8f, 0xa0, 0x53, 0x31, 0xef,
	0xd5, 0x64, 0x31, 0xf2, 0xd5, 0xd1, 0x70, 0xaa, 0x26, 0xec, 0x01, 0xb4, 0x62, 0x55, 0x44, 0xe4,
	0xd5, 0xa5, 0x02, 0xcf, 0xe2, 0x90, 0x0c, 0x2f, 0x87, 0x50, 0x5b, 0x1b, 0x42, 0x0f, 0xc0, 0xfe,
	0xef, 0x15, 0xd2, 0xf6, 0xac, 0x53, 0xa6, 0x63, 0x99, 0x10, 0x0b, 0x49, 0x2d, 0x77, 0xc0, 0xa3,
	0xd5, 0x3d, 0x96, 0x69, 0xf9, 0x02, 0x2e, 0x07, 0x22, 0x42, 0x23, 0x53, 0xc1, 0x9e, 0x42, 0x7b,
	0x65, 0x77, 0xb9, 0x80, 0x37, 0x87, 0x58, 0xc8, 0xe1, 0x6a, 0x4c, 0x7c, 0xbd, 0x86, 0xdd, 0x81,
	0xba, 0xd4, 0x7b, 0x85, 0x5c, 0xec, 0x62, 0x43, 0x6a, 0x7b, 0x99, 0xd5, 0x2e, 0xf5, 0x07, 0x25,
	0x8d, 0x50, 0xb4, 0x8b, 0x2d, 0xee, 0x49, 0x1d, 0x7e, 0x26, 0xa2, 0x4c, 0x72, 0x81, 0x63, 0xa1,
	0x7c, 0xa8, 0x92, 0x8a, 0x88, 0x32, 0x79, 0x88, 0x3a, 0x11, 0xca, 0x6f, 0x57, 0xc9, 0x84, 0x88,
	0x32, 0x79, 0xbc, 0x7f, 0x84, 0x85, 0xf4, 0x3b, 0x55, 0xd2, 0x44, 0x85, 0xbd, 0xf3, 0x1e, 0x34,
	0xa4, 0x8e, 0xf9, 0xd1, 0xbe, 0xdf, 0xa5, 0x54, 0x53, 0xea, 0xd0, 0x0e, 0xac, 0x5a, 0x8e, 0xcd,
	0x7f, 0x2e, 0x47, 0xff, 0x05, 0x74, 0xd7, 0xdf, 0x50, 0xb3, 0xc7, 0x50, 0xb7, 0x53, 0xd3, 0xbe,
	0x43, 0x07, 0x6e, 0xd3, 0x00, 0xd6, 0x4b, 0x78, 0x99, 0x7f, 0xf5, 0xf0, 0xe2, 0x32, 0xd8, 0xf8,
	0x73, 0x19, 0x38, 0xdf, 0xe6, 0x81, 0x73, 0x31, 0x0f, 0x9c, 0x1f, 0xf3, 0xc0, 0xf9, 0x39, 0x0f,
	0x9c, 0x2f, 0xbf, 0x82, 0x8d, 0x93, 0x06, 0x7d, 0x63, 0x9e, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x87, 0x32, 0xcc, 0x00, 0xcd, 0x04, 0x00, 0x00,
}
