// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package series

import (
	repr "cadent/server/schemas/repr"
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson52f3c88fDecodeCadentServerSchemasSeries(in *jlexer.Lexer, out *AnyMetricList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "raw":
			if in.IsNull() {
				in.Skip()
				out.Raw = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Raw = make([]*RawMetric, 0, 8)
				} else {
					out.Raw = []*RawMetric{}
				}
				for !in.IsDelim(']') {
					var v1 *RawMetric
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(RawMetric)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v1).UnmarshalJSON(data))
						}
					}
					out.Raw = append(out.Raw, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unprocessed":
			if in.IsNull() {
				in.Skip()
				out.Unprocessed = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Unprocessed = make([]*UnProcessedMetric, 0, 8)
				} else {
					out.Unprocessed = []*UnProcessedMetric{}
				}
				for !in.IsDelim(']') {
					var v2 *UnProcessedMetric
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(UnProcessedMetric)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v2).UnmarshalJSON(data))
						}
					}
					out.Unprocessed = append(out.Unprocessed, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "single":
			if in.IsNull() {
				in.Skip()
				out.Single = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Single = make([]*SingleMetric, 0, 8)
				} else {
					out.Single = []*SingleMetric{}
				}
				for !in.IsDelim(']') {
					var v3 *SingleMetric
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(SingleMetric)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v3).UnmarshalJSON(data))
						}
					}
					out.Single = append(out.Single, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "series":
			if in.IsNull() {
				in.Skip()
				out.Series = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Series = make([]*SeriesMetric, 0, 8)
				} else {
					out.Series = []*SeriesMetric{}
				}
				for !in.IsDelim(']') {
					var v4 *SeriesMetric
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(SeriesMetric)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v4).UnmarshalJSON(data))
						}
					}
					out.Series = append(out.Series, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "uid_metric":
			if in.IsNull() {
				in.Skip()
				out.UidMetric = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.UidMetric = make([]*UidMetric, 0, 8)
				} else {
					out.UidMetric = []*UidMetric{}
				}
				for !in.IsDelim(']') {
					var v5 *UidMetric
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(UidMetric)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v5).UnmarshalJSON(data))
						}
					}
					out.UidMetric = append(out.UidMetric, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "written":
			if in.IsNull() {
				in.Skip()
				out.Written = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Written = make([]*MetricWritten, 0, 8)
				} else {
					out.Written = []*MetricWritten{}
				}
				for !in.IsDelim(']') {
					var v6 *MetricWritten
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(MetricWritten)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v6).UnmarshalJSON(data))
						}
					}
					out.Written = append(out.Written, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52f3c88fEncodeCadentServerSchemasSeries(out *jwriter.Writer, in AnyMetricList) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Raw) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"raw\":")
		if in.Raw == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Raw {
				if v7 > 0 {
					out.RawByte(',')
				}
				if v8 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v8).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Unprocessed) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"unprocessed\":")
		if in.Unprocessed == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Unprocessed {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v10).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Single) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"single\":")
		if in.Single == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Single {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v12).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Series) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"series\":")
		if in.Series == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Series {
				if v13 > 0 {
					out.RawByte(',')
				}
				if v14 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v14).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.UidMetric) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"uid_metric\":")
		if in.UidMetric == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.UidMetric {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v16).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Written) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"written\":")
		if in.Written == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Written {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v18).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnyMetricList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52f3c88fEncodeCadentServerSchemasSeries(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnyMetricList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52f3c88fEncodeCadentServerSchemasSeries(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnyMetricList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52f3c88fDecodeCadentServerSchemasSeries(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnyMetricList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52f3c88fDecodeCadentServerSchemasSeries(l, v)
}
func easyjson52f3c88fDecodeCadentServerSchemasSeries1(in *jlexer.Lexer, out *AnyMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "raw":
			if in.IsNull() {
				in.Skip()
				out.Raw = nil
			} else {
				if out.Raw == nil {
					out.Raw = new(RawMetric)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Raw).UnmarshalJSON(data))
				}
			}
		case "unprocessed":
			if in.IsNull() {
				in.Skip()
				out.Unprocessed = nil
			} else {
				if out.Unprocessed == nil {
					out.Unprocessed = new(UnProcessedMetric)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Unprocessed).UnmarshalJSON(data))
				}
			}
		case "single":
			if in.IsNull() {
				in.Skip()
				out.Single = nil
			} else {
				if out.Single == nil {
					out.Single = new(SingleMetric)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Single).UnmarshalJSON(data))
				}
			}
		case "series":
			if in.IsNull() {
				in.Skip()
				out.Series = nil
			} else {
				if out.Series == nil {
					out.Series = new(SeriesMetric)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Series).UnmarshalJSON(data))
				}
			}
		case "uid_metric":
			if in.IsNull() {
				in.Skip()
				out.UidMetric = nil
			} else {
				if out.UidMetric == nil {
					out.UidMetric = new(UidMetric)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UidMetric).UnmarshalJSON(data))
				}
			}
		case "written":
			if in.IsNull() {
				in.Skip()
				out.Written = nil
			} else {
				if out.Written == nil {
					out.Written = new(MetricWritten)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Written).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52f3c88fEncodeCadentServerSchemasSeries1(out *jwriter.Writer, in AnyMetric) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Raw != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"raw\":")
		if in.Raw == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Raw).MarshalJSON())
		}
	}
	if in.Unprocessed != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"unprocessed\":")
		if in.Unprocessed == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Unprocessed).MarshalJSON())
		}
	}
	if in.Single != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"single\":")
		if in.Single == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Single).MarshalJSON())
		}
	}
	if in.Series != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"series\":")
		if in.Series == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Series).MarshalJSON())
		}
	}
	if in.UidMetric != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"uid_metric\":")
		if in.UidMetric == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.UidMetric).MarshalJSON())
		}
	}
	if in.Written != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"written\":")
		if in.Written == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Written).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnyMetric) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52f3c88fEncodeCadentServerSchemasSeries1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnyMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52f3c88fEncodeCadentServerSchemasSeries1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnyMetric) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52f3c88fDecodeCadentServerSchemasSeries1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnyMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52f3c88fDecodeCadentServerSchemasSeries1(l, v)
}
func easyjson52f3c88fDecodeCadentServerSchemasSeries2(in *jlexer.Lexer, out *MetricWritten) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "uid":
			out.Uid = string(in.String())
		case "metric":
			out.Metric = string(in.String())
		case "start_time":
			out.StartTime = int64(in.Int64())
		case "end_time":
			out.EndTime = int64(in.Int64())
		case "write_time":
			out.WriteTime = int64(in.Int64())
		case "offset":
			out.Offset = int64(in.Int64())
		case "partition":
			out.Partition = int32(in.Int32())
		case "topic":
			out.Topic = string(in.String())
		case "resolution":
			out.Resolution = uint32(in.Uint32())
		case "ttl":
			out.Ttl = uint32(in.Uint32())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Tags = make([]*repr.Tag, 0, 8)
				} else {
					out.Tags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v19 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v19).UnmarshalJSON(data))
						}
					}
					out.Tags = append(out.Tags, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta_tags":
			if in.IsNull() {
				in.Skip()
				out.MetaTags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.MetaTags = make([]*repr.Tag, 0, 8)
				} else {
					out.MetaTags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v20 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v20 = nil
					} else {
						if v20 == nil {
							v20 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v20).UnmarshalJSON(data))
						}
					}
					out.MetaTags = append(out.MetaTags, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sent_time":
			out.SentTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52f3c88fEncodeCadentServerSchemasSeries2(out *jwriter.Writer, in MetricWritten) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Uint64(uint64(in.Id))
	}
	if in.Uid != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"uid\":")
		out.String(string(in.Uid))
	}
	if in.Metric != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"metric\":")
		out.String(string(in.Metric))
	}
	if in.StartTime != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"start_time\":")
		out.Int64(int64(in.StartTime))
	}
	if in.EndTime != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"end_time\":")
		out.Int64(int64(in.EndTime))
	}
	if in.WriteTime != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"write_time\":")
		out.Int64(int64(in.WriteTime))
	}
	if in.Offset != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"offset\":")
		out.Int64(int64(in.Offset))
	}
	if in.Partition != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"partition\":")
		out.Int32(int32(in.Partition))
	}
	if in.Topic != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"topic\":")
		out.String(string(in.Topic))
	}
	if in.Resolution != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"resolution\":")
		out.Uint32(uint32(in.Resolution))
	}
	if in.Ttl != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ttl\":")
		out.Uint32(uint32(in.Ttl))
	}
	if len(in.Tags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tags\":")
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Tags {
				if v21 > 0 {
					out.RawByte(',')
				}
				if v22 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v22).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.MetaTags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"meta_tags\":")
		if in.MetaTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.MetaTags {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v24).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if in.SentTime != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sent_time\":")
		out.Int64(int64(in.SentTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetricWritten) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52f3c88fEncodeCadentServerSchemasSeries2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricWritten) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52f3c88fEncodeCadentServerSchemasSeries2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetricWritten) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52f3c88fDecodeCadentServerSchemasSeries2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricWritten) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52f3c88fDecodeCadentServerSchemasSeries2(l, v)
}
func easyjson52f3c88fDecodeCadentServerSchemasSeries3(in *jlexer.Lexer, out *RawMetricList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.List = make([]*RawMetric, 0, 8)
				} else {
					out.List = []*RawMetric{}
				}
				for !in.IsDelim(']') {
					var v25 *RawMetric
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(RawMetric)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v25).UnmarshalJSON(data))
						}
					}
					out.List = append(out.List, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52f3c88fEncodeCadentServerSchemasSeries3(out *jwriter.Writer, in RawMetricList) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.List) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"list\":")
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.List {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v27).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawMetricList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52f3c88fEncodeCadentServerSchemasSeries3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawMetricList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52f3c88fEncodeCadentServerSchemasSeries3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawMetricList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52f3c88fDecodeCadentServerSchemasSeries3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawMetricList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52f3c88fDecodeCadentServerSchemasSeries3(l, v)
}
func easyjson52f3c88fDecodeCadentServerSchemasSeries4(in *jlexer.Lexer, out *RawMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = int64(in.Int64())
		case "metric":
			out.Metric = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Tags = make([]*repr.Tag, 0, 8)
				} else {
					out.Tags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v28 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						if v28 == nil {
							v28 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v28).UnmarshalJSON(data))
						}
					}
					out.Tags = append(out.Tags, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta_tags":
			if in.IsNull() {
				in.Skip()
				out.MetaTags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.MetaTags = make([]*repr.Tag, 0, 8)
				} else {
					out.MetaTags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v29 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v29 = nil
					} else {
						if v29 == nil {
							v29 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v29).UnmarshalJSON(data))
						}
					}
					out.MetaTags = append(out.MetaTags, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sent_time":
			out.SentTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52f3c88fEncodeCadentServerSchemasSeries4(out *jwriter.Writer, in RawMetric) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Time != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"time\":")
		out.Int64(int64(in.Time))
	}
	if in.Metric != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"metric\":")
		out.String(string(in.Metric))
	}
	if in.Value != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"value\":")
		out.Float64(float64(in.Value))
	}
	if len(in.Tags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tags\":")
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.Tags {
				if v30 > 0 {
					out.RawByte(',')
				}
				if v31 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v31).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.MetaTags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"meta_tags\":")
		if in.MetaTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.MetaTags {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v33).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if in.SentTime != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sent_time\":")
		out.Int64(int64(in.SentTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawMetric) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52f3c88fEncodeCadentServerSchemasSeries4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52f3c88fEncodeCadentServerSchemasSeries4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawMetric) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52f3c88fDecodeCadentServerSchemasSeries4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52f3c88fDecodeCadentServerSchemasSeries4(l, v)
}
func easyjson52f3c88fDecodeCadentServerSchemasSeries5(in *jlexer.Lexer, out *UnProcessedMetricList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.List = make([]*UnProcessedMetric, 0, 8)
				} else {
					out.List = []*UnProcessedMetric{}
				}
				for !in.IsDelim(']') {
					var v34 *UnProcessedMetric
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						if v34 == nil {
							v34 = new(UnProcessedMetric)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v34).UnmarshalJSON(data))
						}
					}
					out.List = append(out.List, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52f3c88fEncodeCadentServerSchemasSeries5(out *jwriter.Writer, in UnProcessedMetricList) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.List) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"list\":")
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.List {
				if v35 > 0 {
					out.RawByte(',')
				}
				if v36 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v36).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnProcessedMetricList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52f3c88fEncodeCadentServerSchemasSeries5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnProcessedMetricList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52f3c88fEncodeCadentServerSchemasSeries5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnProcessedMetricList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52f3c88fDecodeCadentServerSchemasSeries5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnProcessedMetricList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52f3c88fDecodeCadentServerSchemasSeries5(l, v)
}
func easyjson52f3c88fDecodeCadentServerSchemasSeries6(in *jlexer.Lexer, out *UnProcessedMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = int64(in.Int64())
		case "metric":
			out.Metric = string(in.String())
		case "min":
			out.Min = float64(in.Float64())
		case "max":
			out.Max = float64(in.Float64())
		case "last":
			out.Last = float64(in.Float64())
		case "sum":
			out.Sum = float64(in.Float64())
		case "count":
			out.Count = int64(in.Int64())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Tags = make([]*repr.Tag, 0, 8)
				} else {
					out.Tags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v37 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v37 = nil
					} else {
						if v37 == nil {
							v37 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v37).UnmarshalJSON(data))
						}
					}
					out.Tags = append(out.Tags, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta_tags":
			if in.IsNull() {
				in.Skip()
				out.MetaTags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.MetaTags = make([]*repr.Tag, 0, 8)
				} else {
					out.MetaTags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v38 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v38 = nil
					} else {
						if v38 == nil {
							v38 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v38).UnmarshalJSON(data))
						}
					}
					out.MetaTags = append(out.MetaTags, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sent_time":
			out.SentTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52f3c88fEncodeCadentServerSchemasSeries6(out *jwriter.Writer, in UnProcessedMetric) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Time != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"time\":")
		out.Int64(int64(in.Time))
	}
	if in.Metric != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"metric\":")
		out.String(string(in.Metric))
	}
	if in.Min != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"min\":")
		out.Float64(float64(in.Min))
	}
	if in.Max != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"max\":")
		out.Float64(float64(in.Max))
	}
	if in.Last != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"last\":")
		out.Float64(float64(in.Last))
	}
	if in.Sum != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sum\":")
		out.Float64(float64(in.Sum))
	}
	if in.Count != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"count\":")
		out.Int64(int64(in.Count))
	}
	if len(in.Tags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tags\":")
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v39, v40 := range in.Tags {
				if v39 > 0 {
					out.RawByte(',')
				}
				if v40 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v40).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.MetaTags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"meta_tags\":")
		if in.MetaTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.MetaTags {
				if v41 > 0 {
					out.RawByte(',')
				}
				if v42 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v42).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if in.SentTime != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sent_time\":")
		out.Int64(int64(in.SentTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnProcessedMetric) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52f3c88fEncodeCadentServerSchemasSeries6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnProcessedMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52f3c88fEncodeCadentServerSchemasSeries6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnProcessedMetric) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52f3c88fDecodeCadentServerSchemasSeries6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnProcessedMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52f3c88fDecodeCadentServerSchemasSeries6(l, v)
}
func easyjson52f3c88fDecodeCadentServerSchemasSeries7(in *jlexer.Lexer, out *SingleMetricList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.List = make([]*SingleMetric, 0, 8)
				} else {
					out.List = []*SingleMetric{}
				}
				for !in.IsDelim(']') {
					var v43 *SingleMetric
					if in.IsNull() {
						in.Skip()
						v43 = nil
					} else {
						if v43 == nil {
							v43 = new(SingleMetric)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v43).UnmarshalJSON(data))
						}
					}
					out.List = append(out.List, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52f3c88fEncodeCadentServerSchemasSeries7(out *jwriter.Writer, in SingleMetricList) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.List) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"list\":")
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.List {
				if v44 > 0 {
					out.RawByte(',')
				}
				if v45 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v45).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SingleMetricList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52f3c88fEncodeCadentServerSchemasSeries7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SingleMetricList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52f3c88fEncodeCadentServerSchemasSeries7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SingleMetricList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52f3c88fDecodeCadentServerSchemasSeries7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SingleMetricList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52f3c88fDecodeCadentServerSchemasSeries7(l, v)
}
func easyjson52f3c88fDecodeCadentServerSchemasSeries8(in *jlexer.Lexer, out *SingleMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "uid":
			out.Uid = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		case "metric":
			out.Metric = string(in.String())
		case "min":
			out.Min = float64(in.Float64())
		case "max":
			out.Max = float64(in.Float64())
		case "last":
			out.Last = float64(in.Float64())
		case "sum":
			out.Sum = float64(in.Float64())
		case "count":
			out.Count = int64(in.Int64())
		case "resolution":
			out.Resolution = uint32(in.Uint32())
		case "ttl":
			out.Ttl = uint32(in.Uint32())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Tags = make([]*repr.Tag, 0, 8)
				} else {
					out.Tags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v46 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v46 = nil
					} else {
						if v46 == nil {
							v46 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v46).UnmarshalJSON(data))
						}
					}
					out.Tags = append(out.Tags, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta_tags":
			if in.IsNull() {
				in.Skip()
				out.MetaTags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.MetaTags = make([]*repr.Tag, 0, 8)
				} else {
					out.MetaTags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v47 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v47 = nil
					} else {
						if v47 == nil {
							v47 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v47).UnmarshalJSON(data))
						}
					}
					out.MetaTags = append(out.MetaTags, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sent_time":
			out.SentTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52f3c88fEncodeCadentServerSchemasSeries8(out *jwriter.Writer, in SingleMetric) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Uint64(uint64(in.Id))
	}
	if in.Uid != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"uid\":")
		out.String(string(in.Uid))
	}
	if in.Time != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"time\":")
		out.Int64(int64(in.Time))
	}
	if in.Metric != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"metric\":")
		out.String(string(in.Metric))
	}
	if in.Min != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"min\":")
		out.Float64(float64(in.Min))
	}
	if in.Max != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"max\":")
		out.Float64(float64(in.Max))
	}
	if in.Last != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"last\":")
		out.Float64(float64(in.Last))
	}
	if in.Sum != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sum\":")
		out.Float64(float64(in.Sum))
	}
	if in.Count != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"count\":")
		out.Int64(int64(in.Count))
	}
	if in.Resolution != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"resolution\":")
		out.Uint32(uint32(in.Resolution))
	}
	if in.Ttl != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ttl\":")
		out.Uint32(uint32(in.Ttl))
	}
	if len(in.Tags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tags\":")
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v48, v49 := range in.Tags {
				if v48 > 0 {
					out.RawByte(',')
				}
				if v49 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v49).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.MetaTags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"meta_tags\":")
		if in.MetaTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.MetaTags {
				if v50 > 0 {
					out.RawByte(',')
				}
				if v51 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v51).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if in.SentTime != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sent_time\":")
		out.Int64(int64(in.SentTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SingleMetric) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52f3c88fEncodeCadentServerSchemasSeries8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SingleMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52f3c88fEncodeCadentServerSchemasSeries8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SingleMetric) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52f3c88fDecodeCadentServerSchemasSeries8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SingleMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52f3c88fDecodeCadentServerSchemasSeries8(l, v)
}
func easyjson52f3c88fDecodeCadentServerSchemasSeries9(in *jlexer.Lexer, out *UidMetricList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.List = make([]*UidMetricList, 0, 8)
				} else {
					out.List = []*UidMetricList{}
				}
				for !in.IsDelim(']') {
					var v52 *UidMetricList
					if in.IsNull() {
						in.Skip()
						v52 = nil
					} else {
						if v52 == nil {
							v52 = new(UidMetricList)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v52).UnmarshalJSON(data))
						}
					}
					out.List = append(out.List, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52f3c88fEncodeCadentServerSchemasSeries9(out *jwriter.Writer, in UidMetricList) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.List) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"list\":")
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.List {
				if v53 > 0 {
					out.RawByte(',')
				}
				if v54 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v54).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UidMetricList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52f3c88fEncodeCadentServerSchemasSeries9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UidMetricList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52f3c88fEncodeCadentServerSchemasSeries9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UidMetricList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52f3c88fDecodeCadentServerSchemasSeries9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UidMetricList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52f3c88fDecodeCadentServerSchemasSeries9(l, v)
}
func easyjson52f3c88fDecodeCadentServerSchemasSeries10(in *jlexer.Lexer, out *UidMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.Uid = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		case "min":
			out.Min = float64(in.Float64())
		case "max":
			out.Max = float64(in.Float64())
		case "last":
			out.Last = float64(in.Float64())
		case "sum":
			out.Sum = float64(in.Float64())
		case "count":
			out.Count = int64(in.Int64())
		case "sent_time":
			out.SentTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52f3c88fEncodeCadentServerSchemasSeries10(out *jwriter.Writer, in UidMetric) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Uid != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"uid\":")
		out.String(string(in.Uid))
	}
	if in.Time != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"time\":")
		out.Int64(int64(in.Time))
	}
	if in.Min != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"min\":")
		out.Float64(float64(in.Min))
	}
	if in.Max != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"max\":")
		out.Float64(float64(in.Max))
	}
	if in.Last != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"last\":")
		out.Float64(float64(in.Last))
	}
	if in.Sum != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sum\":")
		out.Float64(float64(in.Sum))
	}
	if in.Count != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"count\":")
		out.Int64(int64(in.Count))
	}
	if in.SentTime != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sent_time\":")
		out.Int64(int64(in.SentTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UidMetric) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52f3c88fEncodeCadentServerSchemasSeries10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UidMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52f3c88fEncodeCadentServerSchemasSeries10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UidMetric) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52f3c88fDecodeCadentServerSchemasSeries10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UidMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52f3c88fDecodeCadentServerSchemasSeries10(l, v)
}
func easyjson52f3c88fDecodeCadentServerSchemasSeries11(in *jlexer.Lexer, out *SeriesMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = uint64(in.Uint64())
		case "uid":
			out.Uid = string(in.String())
		case "time":
			out.Time = int64(in.Int64())
		case "metric":
			out.Metric = string(in.String())
		case "encoding":
			out.Encoding = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		case "resolution":
			out.Resolution = uint32(in.Uint32())
		case "ttl":
			out.Ttl = uint32(in.Uint32())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Tags = make([]*repr.Tag, 0, 8)
				} else {
					out.Tags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v56 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v56 = nil
					} else {
						if v56 == nil {
							v56 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v56).UnmarshalJSON(data))
						}
					}
					out.Tags = append(out.Tags, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta_tags":
			if in.IsNull() {
				in.Skip()
				out.MetaTags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.MetaTags = make([]*repr.Tag, 0, 8)
				} else {
					out.MetaTags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v57 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v57 = nil
					} else {
						if v57 == nil {
							v57 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v57).UnmarshalJSON(data))
						}
					}
					out.MetaTags = append(out.MetaTags, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sent_time":
			out.SentTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52f3c88fEncodeCadentServerSchemasSeries11(out *jwriter.Writer, in SeriesMetric) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Uint64(uint64(in.Id))
	}
	if in.Uid != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"uid\":")
		out.String(string(in.Uid))
	}
	if in.Time != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"time\":")
		out.Int64(int64(in.Time))
	}
	if in.Metric != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"metric\":")
		out.String(string(in.Metric))
	}
	if in.Encoding != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"encoding\":")
		out.String(string(in.Encoding))
	}
	if len(in.Data) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"data\":")
		out.Base64Bytes(in.Data)
	}
	if in.Resolution != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"resolution\":")
		out.Uint32(uint32(in.Resolution))
	}
	if in.Ttl != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ttl\":")
		out.Uint32(uint32(in.Ttl))
	}
	if len(in.Tags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tags\":")
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v60, v61 := range in.Tags {
				if v60 > 0 {
					out.RawByte(',')
				}
				if v61 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v61).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.MetaTags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"meta_tags\":")
		if in.MetaTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v62, v63 := range in.MetaTags {
				if v62 > 0 {
					out.RawByte(',')
				}
				if v63 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v63).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if in.SentTime != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sent_time\":")
		out.Int64(int64(in.SentTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SeriesMetric) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52f3c88fEncodeCadentServerSchemasSeries11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SeriesMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52f3c88fEncodeCadentServerSchemasSeries11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SeriesMetric) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52f3c88fDecodeCadentServerSchemasSeries11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SeriesMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52f3c88fDecodeCadentServerSchemasSeries11(l, v)
}
func easyjson52f3c88fDecodeCadentServerSchemasSeries12(in *jlexer.Lexer, out *MetricValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = int64(in.Int64())
		case "min":
			out.Min = float64(in.Float64())
		case "max":
			out.Max = float64(in.Float64())
		case "last":
			out.Last = float64(in.Float64())
		case "sum":
			out.Sum = float64(in.Float64())
		case "count":
			out.Count = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52f3c88fEncodeCadentServerSchemasSeries12(out *jwriter.Writer, in MetricValue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Time != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"time\":")
		out.Int64(int64(in.Time))
	}
	if in.Min != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"min\":")
		out.Float64(float64(in.Min))
	}
	if in.Max != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"max\":")
		out.Float64(float64(in.Max))
	}
	if in.Last != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"last\":")
		out.Float64(float64(in.Last))
	}
	if in.Sum != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sum\":")
		out.Float64(float64(in.Sum))
	}
	if in.Count != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"count\":")
		out.Int64(int64(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetricValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52f3c88fEncodeCadentServerSchemasSeries12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52f3c88fEncodeCadentServerSchemasSeries12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetricValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52f3c88fDecodeCadentServerSchemasSeries12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52f3c88fDecodeCadentServerSchemasSeries12(l, v)
}
func easyjson52f3c88fDecodeCadentServerSchemasSeries13(in *jlexer.Lexer, out *MetricName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metric":
			out.Metric = string(in.String())
		case "id":
			out.Id = uint64(in.Uint64())
		case "uid":
			out.Uid = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Tags = make([]*repr.Tag, 0, 8)
				} else {
					out.Tags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v64 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v64 = nil
					} else {
						if v64 == nil {
							v64 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v64).UnmarshalJSON(data))
						}
					}
					out.Tags = append(out.Tags, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "meta_tags":
			if in.IsNull() {
				in.Skip()
				out.MetaTags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.MetaTags = make([]*repr.Tag, 0, 8)
				} else {
					out.MetaTags = []*repr.Tag{}
				}
				for !in.IsDelim(']') {
					var v65 *repr.Tag
					if in.IsNull() {
						in.Skip()
						v65 = nil
					} else {
						if v65 == nil {
							v65 = new(repr.Tag)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v65).UnmarshalJSON(data))
						}
					}
					out.MetaTags = append(out.MetaTags, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52f3c88fEncodeCadentServerSchemasSeries13(out *jwriter.Writer, in MetricName) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Metric != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"metric\":")
		out.String(string(in.Metric))
	}
	if in.Id != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Uint64(uint64(in.Id))
	}
	if in.Uid != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"uid\":")
		out.String(string(in.Uid))
	}
	if len(in.Tags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tags\":")
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v66, v67 := range in.Tags {
				if v66 > 0 {
					out.RawByte(',')
				}
				if v67 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v67).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.MetaTags) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"meta_tags\":")
		if in.MetaTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.MetaTags {
				if v68 > 0 {
					out.RawByte(',')
				}
				if v69 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v69).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetricName) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52f3c88fEncodeCadentServerSchemasSeries13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricName) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52f3c88fEncodeCadentServerSchemasSeries13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetricName) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52f3c88fDecodeCadentServerSchemasSeries13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricName) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52f3c88fDecodeCadentServerSchemasSeries13(l, v)
}
func easyjson52f3c88fDecodeCadentServerSchemasSeries14(in *jlexer.Lexer, out *MetricType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52f3c88fEncodeCadentServerSchemasSeries14(out *jwriter.Writer, in MetricType) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"type\":")
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetricType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52f3c88fEncodeCadentServerSchemasSeries14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52f3c88fEncodeCadentServerSchemasSeries14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetricType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52f3c88fDecodeCadentServerSchemasSeries14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52f3c88fDecodeCadentServerSchemasSeries14(l, v)
}
