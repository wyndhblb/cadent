// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package codec

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	"reflect"
	"runtime"
)

const (
	// ----- content types ----
	codecSelferC_UTF84869 = 1
	codecSelferC_RAW4869  = 0
	// ----- value types used ----
	codecSelferValueTypeArray4869 = 10
	codecSelferValueTypeMap4869   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey4869    = 2
	codecSelfer_containerMapValue4869  = 3
	codecSelfer_containerMapEnd4869    = 4
	codecSelfer_containerArrayElem4869 = 6
	codecSelfer_containerArrayEnd4869  = 7
)

var (
	codecSelferBitsize4869                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr4869 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer4869 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
	}
}

func (x *FullStat) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4869)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.Time))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4869)
				r.EncodeString(codecSelferC_UTF84869, string("t"))
				z.EncSendContainerState(codecSelfer_containerMapValue4869)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.Time))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4869)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeFloat64(float64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4869)
				r.EncodeString(codecSelferC_UTF84869, string("n"))
				z.EncSendContainerState(codecSelfer_containerMapValue4869)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeFloat64(float64(x.Min))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4869)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeFloat64(float64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4869)
				r.EncodeString(codecSelferC_UTF84869, string("m"))
				z.EncSendContainerState(codecSelfer_containerMapValue4869)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeFloat64(float64(x.Max))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4869)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeFloat64(float64(x.Sum))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4869)
				r.EncodeString(codecSelferC_UTF84869, string("s"))
				z.EncSendContainerState(codecSelfer_containerMapValue4869)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeFloat64(float64(x.Sum))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4869)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeFloat64(float64(x.Last))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4869)
				r.EncodeString(codecSelferC_UTF84869, string("l"))
				z.EncSendContainerState(codecSelfer_containerMapValue4869)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeFloat64(float64(x.Last))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4869)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeInt(int64(x.Count))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4869)
				r.EncodeString(codecSelferC_UTF84869, string("c"))
				z.EncSendContainerState(codecSelfer_containerMapValue4869)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeInt(int64(x.Count))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4869)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4869)
			}
		}
	}
}

func (x *FullStat) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4869 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4869)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4869 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4869)
		}
	}
}

func (x *FullStat) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4869)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue4869)
		switch yys3 {
		case "t":
			if r.TryDecodeAsNil() {
				x.Time = 0
			} else {
				yyv4 := &x.Time
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "n":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				yyv6 := &x.Min
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*float64)(yyv6)) = float64(r.DecodeFloat(false))
				}
			}
		case "m":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				yyv8 := &x.Max
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*float64)(yyv8)) = float64(r.DecodeFloat(false))
				}
			}
		case "s":
			if r.TryDecodeAsNil() {
				x.Sum = 0
			} else {
				yyv10 := &x.Sum
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*float64)(yyv10)) = float64(r.DecodeFloat(false))
				}
			}
		case "l":
			if r.TryDecodeAsNil() {
				x.Last = 0
			} else {
				yyv12 := &x.Last
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*float64)(yyv12)) = float64(r.DecodeFloat(false))
				}
			}
		case "c":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				yyv14 := &x.Count
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int64)(yyv14)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4869)
}

func (x *FullStat) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4869)
	if r.TryDecodeAsNil() {
		x.Time = 0
	} else {
		yyv17 := &x.Time
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4869)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		yyv19 := &x.Min
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*float64)(yyv19)) = float64(r.DecodeFloat(false))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4869)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		yyv21 := &x.Max
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*float64)(yyv21)) = float64(r.DecodeFloat(false))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4869)
	if r.TryDecodeAsNil() {
		x.Sum = 0
	} else {
		yyv23 := &x.Sum
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*float64)(yyv23)) = float64(r.DecodeFloat(false))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4869)
	if r.TryDecodeAsNil() {
		x.Last = 0
	} else {
		yyv25 := &x.Last
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*float64)(yyv25)) = float64(r.DecodeFloat(false))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4869)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		yyv27 := &x.Count
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*int64)(yyv27)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4869)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
}

func (x *StatSmall) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4869)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.Time))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4869)
				r.EncodeString(codecSelferC_UTF84869, string("t"))
				z.EncSendContainerState(codecSelfer_containerMapValue4869)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.Time))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4869)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeFloat64(float64(x.Val))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4869)
				r.EncodeString(codecSelferC_UTF84869, string("v"))
				z.EncSendContainerState(codecSelfer_containerMapValue4869)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeFloat64(float64(x.Val))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4869)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4869)
			}
		}
	}
}

func (x *StatSmall) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4869 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4869)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4869 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4869)
		}
	}
}

func (x *StatSmall) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4869)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue4869)
		switch yys3 {
		case "t":
			if r.TryDecodeAsNil() {
				x.Time = 0
			} else {
				yyv4 := &x.Time
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "v":
			if r.TryDecodeAsNil() {
				x.Val = 0
			} else {
				yyv6 := &x.Val
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*float64)(yyv6)) = float64(r.DecodeFloat(false))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4869)
}

func (x *StatSmall) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4869)
	if r.TryDecodeAsNil() {
		x.Time = 0
	} else {
		yyv9 := &x.Time
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*int64)(yyv9)) = int64(r.DecodeInt(64))
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4869)
	if r.TryDecodeAsNil() {
		x.Val = 0
	} else {
		yyv11 := &x.Val
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*float64)(yyv11)) = float64(r.DecodeFloat(false))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4869)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
}

func (x *Stat) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4869)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.StatType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4869)
				r.EncodeString(codecSelferC_UTF84869, string("t"))
				z.EncSendContainerState(codecSelfer_containerMapValue4869)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.StatType))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4869)
				if x.Stat == nil {
					r.EncodeNil()
				} else {
					x.Stat.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4869)
				r.EncodeString(codecSelferC_UTF84869, string("s"))
				z.EncSendContainerState(codecSelfer_containerMapValue4869)
				if x.Stat == nil {
					r.EncodeNil()
				} else {
					x.Stat.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4869)
				if x.SmallStat == nil {
					r.EncodeNil()
				} else {
					x.SmallStat.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4869)
				r.EncodeString(codecSelferC_UTF84869, string("m"))
				z.EncSendContainerState(codecSelfer_containerMapValue4869)
				if x.SmallStat == nil {
					r.EncodeNil()
				} else {
					x.SmallStat.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4869)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4869)
			}
		}
	}
}

func (x *Stat) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4869 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4869)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4869 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4869)
		}
	}
}

func (x *Stat) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4869)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue4869)
		switch yys3 {
		case "t":
			if r.TryDecodeAsNil() {
				x.StatType = false
			} else {
				yyv4 := &x.StatType
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "s":
			if r.TryDecodeAsNil() {
				if x.Stat != nil {
					x.Stat = nil
				}
			} else {
				if x.Stat == nil {
					x.Stat = new(FullStat)
				}
				x.Stat.CodecDecodeSelf(d)
			}
		case "m":
			if r.TryDecodeAsNil() {
				if x.SmallStat != nil {
					x.SmallStat = nil
				}
			} else {
				if x.SmallStat == nil {
					x.SmallStat = new(StatSmall)
				}
				x.SmallStat.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4869)
}

func (x *Stat) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4869)
	if r.TryDecodeAsNil() {
		x.StatType = false
	} else {
		yyv9 := &x.StatType
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*bool)(yyv9)) = r.DecodeBool()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4869)
	if r.TryDecodeAsNil() {
		if x.Stat != nil {
			x.Stat = nil
		}
	} else {
		if x.Stat == nil {
			x.Stat = new(FullStat)
		}
		x.Stat.CodecDecodeSelf(d)
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4869)
	if r.TryDecodeAsNil() {
		if x.SmallStat != nil {
			x.SmallStat = nil
		}
	} else {
		if x.SmallStat == nil {
			x.SmallStat = new(StatSmall)
		}
		x.SmallStat.CodecDecodeSelf(d)
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4869)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
}

func (x *Stats) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4869)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.FullTimeResolution))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4869)
				r.EncodeString(codecSelferC_UTF84869, string("r"))
				z.EncSendContainerState(codecSelfer_containerMapValue4869)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.FullTimeResolution))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem4869)
				if x.Stats == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encSlicePtrtoStat(([]*Stat)(x.Stats), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey4869)
				r.EncodeString(codecSelferC_UTF84869, string("s"))
				z.EncSendContainerState(codecSelfer_containerMapValue4869)
				if x.Stats == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encSlicePtrtoStat(([]*Stat)(x.Stats), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd4869)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd4869)
			}
		}
	}
}

func (x *Stats) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap4869 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd4869)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray4869 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr4869)
		}
	}
}

func (x *Stats) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey4869)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue4869)
		switch yys3 {
		case "r":
			if r.TryDecodeAsNil() {
				x.FullTimeResolution = false
			} else {
				yyv4 := &x.FullTimeResolution
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "s":
			if r.TryDecodeAsNil() {
				x.Stats = nil
			} else {
				yyv6 := &x.Stats
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					h.decSlicePtrtoStat((*[]*Stat)(yyv6), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd4869)
}

func (x *Stats) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4869)
	if r.TryDecodeAsNil() {
		x.FullTimeResolution = false
	} else {
		yyv9 := &x.FullTimeResolution
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*bool)(yyv9)) = r.DecodeBool()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem4869)
	if r.TryDecodeAsNil() {
		x.Stats = nil
	} else {
		yyv11 := &x.Stats
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			h.decSlicePtrtoStat((*[]*Stat)(yyv11), d)
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem4869)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd4869)
}

func (x codecSelfer4869) encSlicePtrtoStat(v []*Stat, e *codec1978.Encoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem4869)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd4869)
}

func (x codecSelfer4869) decSlicePtrtoStat(v *[]*Stat, d *codec1978.Decoder) {
	var h codecSelfer4869
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Stat{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Stat, yyrl1)
				}
			} else {
				yyv1 = make([]*Stat, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Stat{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Stat)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Stat{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Stat)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Stat
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Stat{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Stat)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Stat{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
