// Code generated by protoc-gen-gogo.
// source: protobuf.proto
// DO NOT EDIT!

/*
	Package series is a generated protocol buffer package.

	It is generated from these files:
		protobuf.proto

	It has these top-level messages:
		ProtStatFull
		ProtStatSmall
		ProtStat
		ProtStats
*/
package series

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ProtStatFull struct {
	Time  int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Count int64   `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	Min   float64 `protobuf:"fixed64,2,opt,name=min,proto3" json:"min,omitempty"`
	Max   float64 `protobuf:"fixed64,3,opt,name=max,proto3" json:"max,omitempty"`
	Sum   float64 `protobuf:"fixed64,4,opt,name=sum,proto3" json:"sum,omitempty"`
	Last  float64 `protobuf:"fixed64,5,opt,name=last,proto3" json:"last,omitempty"`
}

func (m *ProtStatFull) Reset()                    { *m = ProtStatFull{} }
func (m *ProtStatFull) String() string            { return proto.CompactTextString(m) }
func (*ProtStatFull) ProtoMessage()               {}
func (*ProtStatFull) Descriptor() ([]byte, []int) { return fileDescriptorProtobuf, []int{0} }

// object for just int32 time and one value
type ProtStatSmall struct {
	Time int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Val  float64 `protobuf:"fixed64,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (m *ProtStatSmall) Reset()                    { *m = ProtStatSmall{} }
func (m *ProtStatSmall) String() string            { return proto.CompactTextString(m) }
func (*ProtStatSmall) ProtoMessage()               {}
func (*ProtStatSmall) Descriptor() ([]byte, []int) { return fileDescriptorProtobuf, []int{1} }

type ProtStat struct {
	StatType  bool           `protobuf:"varint,1,opt,name=stat_type,json=statType,proto3" json:"stat_type,omitempty"`
	Stat      *ProtStatFull  `protobuf:"bytes,3,opt,name=stat" json:"stat,omitempty"`
	SmallStat *ProtStatSmall `protobuf:"bytes,4,opt,name=small_stat,json=smallStat" json:"small_stat,omitempty"`
}

func (m *ProtStat) Reset()                    { *m = ProtStat{} }
func (m *ProtStat) String() string            { return proto.CompactTextString(m) }
func (*ProtStat) ProtoMessage()               {}
func (*ProtStat) Descriptor() ([]byte, []int) { return fileDescriptorProtobuf, []int{2} }

func (m *ProtStat) GetStat() *ProtStatFull {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *ProtStat) GetSmallStat() *ProtStatSmall {
	if m != nil {
		return m.SmallStat
	}
	return nil
}

type ProtStats struct {
	FullTimeResolution bool        `protobuf:"varint,1,opt,name=full_time_resolution,json=fullTimeResolution,proto3" json:"full_time_resolution,omitempty"`
	Stats              []*ProtStat `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
}

func (m *ProtStats) Reset()                    { *m = ProtStats{} }
func (m *ProtStats) String() string            { return proto.CompactTextString(m) }
func (*ProtStats) ProtoMessage()               {}
func (*ProtStats) Descriptor() ([]byte, []int) { return fileDescriptorProtobuf, []int{3} }

func (m *ProtStats) GetStats() []*ProtStat {
	if m != nil {
		return m.Stats
	}
	return nil
}

func init() {
	proto.RegisterType((*ProtStatFull)(nil), "series.ProtStatFull")
	proto.RegisterType((*ProtStatSmall)(nil), "series.ProtStatSmall")
	proto.RegisterType((*ProtStat)(nil), "series.ProtStat")
	proto.RegisterType((*ProtStats)(nil), "series.ProtStats")
}
func (m *ProtStatFull) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProtStatFull) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintProtobuf(data, i, uint64(m.Time))
	}
	if m.Min != 0 {
		data[i] = 0x11
		i++
		i = encodeFixed64Protobuf(data, i, uint64(math.Float64bits(float64(m.Min))))
	}
	if m.Max != 0 {
		data[i] = 0x19
		i++
		i = encodeFixed64Protobuf(data, i, uint64(math.Float64bits(float64(m.Max))))
	}
	if m.Sum != 0 {
		data[i] = 0x21
		i++
		i = encodeFixed64Protobuf(data, i, uint64(math.Float64bits(float64(m.Sum))))
	}
	if m.Last != 0 {
		data[i] = 0x29
		i++
		i = encodeFixed64Protobuf(data, i, uint64(math.Float64bits(float64(m.Last))))
	}
	if m.Count != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintProtobuf(data, i, uint64(m.Count))
	}
	return i, nil
}

func (m *ProtStatSmall) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProtStatSmall) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintProtobuf(data, i, uint64(m.Time))
	}
	if m.Val != 0 {
		data[i] = 0x11
		i++
		i = encodeFixed64Protobuf(data, i, uint64(math.Float64bits(float64(m.Val))))
	}
	return i, nil
}

func (m *ProtStat) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProtStat) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatType {
		data[i] = 0x8
		i++
		if m.StatType {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Stat != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintProtobuf(data, i, uint64(m.Stat.Size()))
		n1, err := m.Stat.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.SmallStat != nil {
		data[i] = 0x22
		i++
		i = encodeVarintProtobuf(data, i, uint64(m.SmallStat.Size()))
		n2, err := m.SmallStat.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ProtStats) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ProtStats) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FullTimeResolution {
		data[i] = 0x8
		i++
		if m.FullTimeResolution {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Stats) > 0 {
		for _, msg := range m.Stats {
			data[i] = 0x12
			i++
			i = encodeVarintProtobuf(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Protobuf(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Protobuf(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintProtobuf(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *ProtStatFull) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovProtobuf(uint64(m.Time))
	}
	if m.Min != 0 {
		n += 9
	}
	if m.Max != 0 {
		n += 9
	}
	if m.Sum != 0 {
		n += 9
	}
	if m.Last != 0 {
		n += 9
	}
	if m.Count != 0 {
		n += 1 + sovProtobuf(uint64(m.Count))
	}
	return n
}

func (m *ProtStatSmall) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovProtobuf(uint64(m.Time))
	}
	if m.Val != 0 {
		n += 9
	}
	return n
}

func (m *ProtStat) Size() (n int) {
	var l int
	_ = l
	if m.StatType {
		n += 2
	}
	if m.Stat != nil {
		l = m.Stat.Size()
		n += 1 + l + sovProtobuf(uint64(l))
	}
	if m.SmallStat != nil {
		l = m.SmallStat.Size()
		n += 1 + l + sovProtobuf(uint64(l))
	}
	return n
}

func (m *ProtStats) Size() (n int) {
	var l int
	_ = l
	if m.FullTimeResolution {
		n += 2
	}
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovProtobuf(uint64(l))
		}
	}
	return n
}

func sovProtobuf(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProtobuf(x uint64) (n int) {
	return sovProtobuf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProtStatFull) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtobuf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtStatFull: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtStatFull: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Min = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Max = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Sum = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Last = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtobuf(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtobuf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtStatSmall) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtobuf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtStatSmall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtStatSmall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Val = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipProtobuf(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtobuf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtStat) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtobuf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatType", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatType = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtobuf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stat == nil {
				m.Stat = &ProtStatFull{}
			}
			if err := m.Stat.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtobuf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmallStat == nil {
				m.SmallStat = &ProtStatSmall{}
			}
			if err := m.SmallStat.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtobuf(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtobuf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtStats) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtobuf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullTimeResolution", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullTimeResolution = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtobuf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &ProtStat{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtobuf(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtobuf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtobuf(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtobuf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtobuf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtobuf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProtobuf
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtobuf
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtobuf(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtobuf = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtobuf   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protobuf.proto", fileDescriptorProtobuf) }

var fileDescriptorProtobuf = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x51, 0xcb, 0x4a, 0xc4, 0x40,
	0x10, 0x74, 0x4c, 0xb2, 0x26, 0xed, 0x83, 0xd0, 0x44, 0x18, 0x10, 0x16, 0xc9, 0x41, 0xf6, 0x14,
	0xc4, 0xc7, 0x0f, 0x78, 0xf0, 0x2c, 0xb3, 0x7b, 0x0f, 0xb3, 0x92, 0x85, 0x40, 0x1e, 0x4b, 0x66,
	0x22, 0xeb, 0xd5, 0x8b, 0x57, 0x3f, 0xcb, 0xa3, 0x9f, 0x20, 0xfa, 0x23, 0xf6, 0x74, 0x36, 0x22,
	0x0b, 0x1e, 0x86, 0x54, 0x57, 0x55, 0x77, 0x57, 0x13, 0x38, 0x59, 0x77, 0xad, 0x6d, 0x97, 0xfd,
	0x2a, 0x63, 0x80, 0x13, 0x53, 0x74, 0x65, 0x61, 0xd2, 0x17, 0x01, 0x47, 0x0f, 0xc4, 0xcc, 0xad,
	0xb6, 0xf7, 0x7d, 0x55, 0x21, 0x82, 0x6f, 0xcb, 0xba, 0x90, 0xe2, 0x5c, 0xcc, 0x3c, 0xc5, 0x18,
	0x63, 0xf0, 0xea, 0xb2, 0x91, 0xfb, 0x44, 0x09, 0xe5, 0x20, 0x33, 0x7a, 0x23, 0xbd, 0x2d, 0xa3,
	0x37, 0x8e, 0x31, 0x7d, 0x2d, 0xfd, 0x81, 0x21, 0xe8, 0x26, 0x55, 0xda, 0x58, 0x19, 0x30, 0xc5,
	0x18, 0x13, 0x08, 0x1e, 0xdb, 0xbe, 0xb1, 0xf2, 0x80, 0xc7, 0x0f, 0x45, 0x7a, 0x0b, 0xc7, 0x63,
	0x86, 0x79, 0xad, 0xff, 0x0f, 0xf1, 0xa4, 0xab, 0x31, 0x04, 0xc1, 0xf4, 0x55, 0x40, 0x38, 0xf6,
	0xe1, 0x19, 0x44, 0x86, 0xbe, 0xb9, 0x7d, 0x5e, 0x0f, 0x7d, 0xa1, 0x0a, 0x1d, 0xb1, 0xa0, 0x1a,
	0x67, 0xe0, 0x3b, 0xcc, 0x79, 0x0f, 0xaf, 0x92, 0x6c, 0x38, 0x3e, 0xfb, 0x7b, 0xb8, 0x62, 0x07,
	0xde, 0x00, 0x18, 0x17, 0x21, 0x67, 0xbf, 0xcf, 0xfe, 0xd3, 0x5d, 0x3f, 0x87, 0x54, 0x11, 0x1b,
	0x5d, 0x9d, 0x16, 0x10, 0x8d, 0x9a, 0xc1, 0x4b, 0x48, 0x56, 0x34, 0x30, 0x77, 0xa9, 0xf3, 0xae,
	0x30, 0x6d, 0xd5, 0xdb, 0xb2, 0x6d, 0xb6, 0xa1, 0xd0, 0x69, 0x0b, 0x92, 0xd4, 0xaf, 0x82, 0x17,
	0x10, 0xb8, 0x75, 0x86, 0x8e, 0xf3, 0x68, 0x5f, 0xbc, 0xbb, 0x4f, 0x0d, 0xf2, 0x5d, 0xfc, 0xfe,
	0x35, 0x15, 0x1f, 0xf4, 0x3e, 0xe9, 0xbd, 0x7d, 0x4f, 0xf7, 0x96, 0x13, 0xfe, 0x9b, 0xd7, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x17, 0x61, 0xcb, 0x54, 0xdf, 0x01, 0x00, 0x00,
}
